/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: BackwardCompatibleRelayMessageSender.java
 *
 ****************************************************************************
 * Date           Author                  Changes
 ****************************************************************************
 * July 17 2003    Jagadeesh             Created.
 */


package com.gridnode.pdip.app.channel.handler.message;

import com.gridnode.pdip.app.channel.helpers.Package;
import com.gridnode.pdip.app.channel.helpers.ChannelUtil;
import com.gridnode.pdip.app.channel.helpers.SecurityServiceHandler;
import com.gridnode.pdip.app.channel.helpers.ChannelLogger;
import com.gridnode.pdip.app.channel.helpers.GNCompatibleEventRegistry;

import com.gridnode.pdip.app.channel.model.ChannelInfo;
import com.gridnode.pdip.app.channel.model.IFlowControlInfo;
import com.gridnode.pdip.app.channel.model.FlowControlInfo;
import com.gridnode.pdip.app.channel.model.ISecurityInfo;
import com.gridnode.pdip.app.channel.model.SecurityInfo;

import com.gridnode.pdip.app.channel.exceptions.FlowControlException;
import com.gridnode.pdip.base.transport.helpers.ITransportConstants;

import java.util.Hashtable;

/**
 * This class performs RelayMessageSend (BackwardCompatible). We choose to extend
 * from  BackwardCompatibleMessageSender as, the RelayMessageSender is dependent on
 * Backward Compatibility.
 *
 * In a ideal case of RelayMessageSend, the send logic may not be dependent on
 * backwardcompatible send.
 *
 * @author Jagadeesh.
 * @version 2.2
 * @since 2.2
 *
 */


public class BackwardCompatibleRelayMessageSender extends BackwardCompatibleMessageSender
{

	private static final String CLASS_NAME = "BackwardCompatibleRelayMessageSender";

	public BackwardCompatibleRelayMessageSender()
	{
	}

	/**
	 * BackwardCompatibleRelayMessageSender overrides this method, inorder to use
	 * different certificates to perform Encrypt and Sign.
	 *
	 * Special Handling of FileContent for Relay Receiver - As (GM - Relay) will not
	 * (decrypt and verify) this Content.
	 * ---------------------------------------------------------------------------
	 *
	 * We Encrypt the filecontent with Receipent MasterChannel Encryption Certificate.
	 * And Sign with OwnMasterChannel Encryption Certificate.
	 *
	 * @param secInfo Security Profile used for Security specific settings
	 * @param fileContent FileContent in byte[] to Encrypt and Sign.
	 * @param header - Header for this Channel Send.
	 * @return Encrypted byte[].
	 * @throws Exception - throws Exception when cannot perform Encrypt And Sign.
	 *
	 * @version 2.2
	 * @since 2.2
	 */

	protected byte[] performFileEncryption(SecurityInfo secInfo,byte[] fileContent,
		Hashtable header) throws Exception
	{
		ChannelUtil channelUtil = ChannelUtil.getInstance();
		SecurityInfo cloneInfo = null;
		String receipentNodeId = (String)header.get(ITransportConstants.RECEIPENT_NODE_ID);
		if (receipentNodeId.equals(channelInfo.getReferenceId())) //If Receipent is Relay
		{
		  cloneInfo = secInfo;
		}
		else
		{
			//Retrieve Receipent MasterChannel.
			ChannelInfo recpMasterChannel = channelUtil.getMasterChannelInfoByRefId(receipentNodeId);
			//Encrypt with Receipent Master Channel Encryption Certificate.
			Long actualEncypCert = recpMasterChannel.getSecurityProfile().getEncryptionCertificateID();
			//Retrieve Own MasterChannel.
			ChannelInfo masterChannel = channelUtil.getChannelInfoByRefId(
																	channelUtil.getMyNodeId());
			//Sign with Own MasterChannel Encryption Certificate.
			Long encyCert = masterChannel.getSecurityProfile().getEncryptionCertificateID();
			ChannelLogger.debugLog(CLASS_NAME,"performFileEncryption()","[Overriding Signature Certificate]");
			ChannelLogger.debugLog(CLASS_NAME,"performFileEncryption()","[EncryptionCert]["+actualEncypCert+"]");
			ChannelLogger.debugLog(CLASS_NAME,"performFileEncryption()","[SignatureCert]["+encyCert+"]");
			cloneInfo = getClonedSecurityInfo(secInfo);
			cloneInfo.setEncryptionCertificateID(actualEncypCert);
			cloneInfo.setSignatureEncryptionCertificateID(encyCert);
		}
		return super.performFileEncryption(cloneInfo,fileContent,header);
	}



	private SecurityInfo getRelaySecurityInfo(SecurityInfo info,Hashtable header) throws Exception
	{
		ChannelUtil channelUtil = ChannelUtil.getInstance();
		String receipentNodeId = (String)header.get(ITransportConstants.RECEIPENT_NODE_ID);
	  ChannelInfo recpMasterChannel = channelUtil.getMasterChannelInfoByRefId(receipentNodeId);
		Long actualEncypCert =recpMasterChannel.getSecurityProfile().getEncryptionCertificateID();
		ChannelInfo masterChannel = channelUtil.getChannelInfoByRefId(
															  channelUtil.getMyNodeId());
		Long encyCert = masterChannel.getSecurityProfile().getEncryptionCertificateID();
		ChannelLogger.debugLog(CLASS_NAME,"getRelaySecurityInfo()","[Overriding Signature Certificate]");
		info.setEncryptionCertificateID(actualEncypCert);
		info.setSignatureEncryptionCertificateID(encyCert);
		ChannelLogger.debugLog(CLASS_NAME,"getRelaySecurityInfo()","[EncryptionCert]["+actualEncypCert+"]");
		ChannelLogger.debugLog(CLASS_NAME,"getRelaySecurityInfo()","[SignatureCert]["+encyCert+"]");
		return info;
	}

	/** @todo Check with soklay, whether we can do this in Entity itself.(Cloning of Entity) */

	private SecurityInfo getClonedSecurityInfo(SecurityInfo info)
	{
		SecurityInfo cloneInfo = new SecurityInfo();
    cloneInfo.setDescription(info.getDescription());
		cloneInfo.setName(info.getName());
		cloneInfo.setEncryptionType(info.getEncryptionType());
		cloneInfo.setEncryptionLevel(info.getEncryptionLevel());
		cloneInfo.setEncryptionCertificateID(info.getEncryptionCertificateID());
		cloneInfo.setSignatureType(info.getSignatureType());
		cloneInfo.setDigestAlgorithm(info.getDigestAlgorithm());
		cloneInfo.setSignatureEncryptionCertificateID(info.getSignatureEncryptionCertificateID());
		cloneInfo.setPartnerCategory(info.getPartnerCategory());
		cloneInfo.setReferenceId(info.getReferenceId());
		cloneInfo.setIsDisable(info.isDisable());
		cloneInfo.setIsPartner(info.isPartner());
		return cloneInfo;
	}


}