// %1023962279895:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File:
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.   
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.Hashtable;

import com.borland.xml.toolkit.TextElement;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssDocumentation;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;


/**
 * The Documentation class represents the element "Documentation" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT Documentation (#PCDATA)&gt;<br>
 */
public class Documentation
  extends AbstractBpssModel
  implements IGWFDeployable
{

  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = -7100358956631318650L;
	private Long _uId;
  /** xml tag name of this element. */
  public static String _tagName = "Documentation";

  /** Defines a uri attribute */
  public GNAttribute _uri = GNXMLDocumentUtility.newAttribute("uri", ""); 
  
  private String _text;
  
  /**
     * Creates an empty Documentation object.
     */
  public Documentation()
  {
    super();
  }

  /**
     * Creates a Documentation object with the specified text.
     */
  public Documentation(String text)
  {
  	//super(text);
    _text = text;
  }

  /**
     * Gets the value of "uri" attribute.
     */
  public String getUri()
  {
    return _uri.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setUri(String value_)
  {
    _uri.setValue(value_);
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
        int finalResult = 0;
        BpssDocumentation bpssDoc=new BpssDocumentation();
        bpssDoc.setUri(this.getUri());
        bpssDoc.setDocumentation(this.getText());

        try {
          AbstractEntityHandler handler=EntityHandlerFactory.getHandlerFor(
            BpssDocumentation.ENTITY_NAME,true);
          bpssDoc=(BpssDocumentation)handler.createEntity(bpssDoc);
          _uId=(Long)bpssDoc.getKey();
          BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
          bpssProcSpecEntry.setSpecUId(specUId);
          bpssProcSpecEntry.setEntryName(_uId.toString());
          bpssProcSpecEntry.setEntryType(bpssDoc.getEntityName());
          bpssProcSpecEntry.setEntryUId(bpssDoc.getUId());
          handler=EntityHandlerFactory.getHandlerFor(
            BpssProcessSpecEntry.ENTITY_NAME,true);
          bpssProcSpecEntry=(BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry);
        }
        catch (Throwable th) {
          //TODO handle RemoteException, ParseException
          System.out.println("Unable to deploy " + bpssDoc.getEntityName());
          th.printStackTrace();
          throw new GWFException(th);
        }
        return finalResult;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
        Utilities.setParentEntryUId(specUId, parentEntryUId, _uId.toString(),
                                  BpssDocumentation.ENTITY_NAME);
  }
  
  
  //TWX
  public Documentation buildModel(GNElement ele)
  {
  	
  	if( ele != null)
  	{
  		_text = ele.getText();
  		
  		super.setAttributeValue(_uri, ele.getAttribute("uri"));

  	}
  	
  	return this;
  }
  
  public GNElement buildElement()
  {
  	GNElement ele = GNXMLDocumentUtility.newElement(get_TagName());
  	ele.setText(_text);
  	
  	addAttributeToElement(ele, this._ATTR_DEFAULT_IMPLIED, _uri);
  		
  	return ele;
  }
  
  public String getText()
  {
  	return _text;
  }
}
