// %1023962279473:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: 
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Nov 11 2005    Neo Sok Lay         Change to use entityHandler.createEntity
 *                                    to ensure created entity has the correct populated UID
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.GWFDeployableList;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssBusinessPartnerRole;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The BusinessPartnerRole class represents the element "BusinessPartnerRole" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT BusinessPartnerRole (Documentation*,Performs*,Transition*)&gt;<br>
 */
public class BusinessPartnerRole
  extends AbstractBpssModel
  implements IGWFDeployable
{

  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 7285844473080337012L;

	/** xml tag name of this element. */
  public static String _tagName = "BusinessPartnerRole";

  
  /** Defines a name attribute */
  public GNAttribute name = GNXMLDocumentUtility.newAttribute("name", "");
  
  /** Defines a nameID attribute */
  public GNAttribute nameID = GNXMLDocumentUtility.newAttribute("nameID", "");
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /** Defines a list of Performs objects. */
  protected ArrayList _objPerforms = new ArrayList();

  /** Defines a list of Transition objects. */
  protected ArrayList _objTransition = new ArrayList();

  /**
     * Creates an empty BusinessPartnerRole object
     */
  public BusinessPartnerRole()
  {
    super();
  }

  /**
     * Gets the value of "name" attribute.
     */
  public String getName()
  {
    return name.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setName(String value_)
  {
    name.setValue(value_);
  }

  /**
     * Gets the value of "nameID" attribute.
     */
  public String getNameID()
  {
    return nameID.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setNameID(String value_)
  {
    nameID.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }

  /**
     * Returns an array of Performs objects. The length of the returned
     * array is zero if the list of Performs object is empty.
     */
  public Performs[] getPerforms()
  {
    return (Performs[])_objPerforms.toArray(new Performs[0]);
  }

  /**
     * Replaces all existing Performs objects with a new array of
     * Performs objects.
     * @param objArray    an array of Performs objects.
     */
  public void setPerforms(Performs[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objPerforms.clear();
    else
    {
      this._objPerforms = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Performs object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Performs getPerforms(int index)
  {
    return (Performs)_objPerforms.get(index);
  }

  /**
     * Replaces an existing Performs object at the specified index with
     * a new Performs object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setPerforms(int index, Performs obj)
  {
    if (obj == null)
      removePerforms(index);
    else
    {
      _objPerforms.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Performs objects in the list.
     */
  public int getPerformsCount()
  {
    return _objPerforms.size();
  }

  /**
     * Returns <code>true</code> if there is no Performs object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoPerforms()
  {
    return _objPerforms.size() == 0;
  }

  /**
     * Returns a read-only list of Performs objects.
     */
  public List getPerformsList()
  {
    return Collections.unmodifiableList(_objPerforms);
  }

  /**
     * Adds a new Performs object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addPerforms(Performs obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objPerforms.add(obj);
  }

  /**
     * Adds a list of new Performs objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addPerforms(Collection coPerforms)
  {
    if (coPerforms == null)
      return false;
    java.util.Iterator it = coPerforms.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objPerforms.addAll(coPerforms);
  }

  /**
     * Removes an existing Performs object at the specified index.
     * @return    The removed object.
     */
  public Performs removePerforms(int index)
  {
    return (Performs)_objPerforms.remove(index);
  }

  /**
     * Removes the specified Performs object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removePerforms(Performs obj)
  {
    return _objPerforms.remove(obj);
  }

  /**
     * Clears all Performs objects from the list.
     */
  public void clearPerformsList()
  {
    _objPerforms.clear();
  }

  /**
     * Returns an array of Transition objects. The length of the returned
     * array is zero if the list of Transition object is empty.
     */
  public Transition[] getTransition()
  {
    return (Transition[])_objTransition.toArray(new Transition[0]);
  }

  /**
     * Replaces all existing Transition objects with a new array of
     * Transition objects.
     * @param objArray    an array of Transition objects.
     */
  public void setTransition(Transition[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objTransition.clear();
    else
    {
      this._objTransition = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Transition object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Transition getTransition(int index)
  {
    return (Transition)_objTransition.get(index);
  }

  /**
     * Replaces an existing Transition object at the specified index with
     * a new Transition object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setTransition(int index, Transition obj)
  {
    if (obj == null)
      removeTransition(index);
    else
    {
      _objTransition.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Transition objects in the list.
     */
  public int getTransitionCount()
  {
    return _objTransition.size();
  }

  /**
     * Returns <code>true</code> if there is no Transition object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoTransition()
  {
    return _objTransition.size() == 0;
  }

  /**
     * Returns a read-only list of Transition objects.
     */
  public List getTransitionList()
  {
    return Collections.unmodifiableList(_objTransition);
  }

  /**
     * Adds a new Transition object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addTransition(Transition obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objTransition.add(obj);
  }

  /**
     * Adds a list of new Transition objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addTransition(Collection coTransition)
  {
    if (coTransition == null)
      return false;
    java.util.Iterator it = coTransition.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objTransition.addAll(coTransition);
  }

  /**
     * Removes an existing Transition object at the specified index.
     * @return    The removed object.
     */
  public Transition removeTransition(int index)
  {
    return (Transition)_objTransition.remove(index);
  }

  /**
     * Removes the specified Transition object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeTransition(Transition obj)
  {
    return _objTransition.remove(obj);
  }

  /**
     * Clears all Transition objects from the list.
     */
  public void clearTransitionList()
  {
    _objTransition.clear();
  }

  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);

    /** adds _objPerforms */
    if (_objPerforms != null && _objPerforms.size() > 0)
      children.add(_objPerforms);

    /** adds _objTransition */
    if (_objTransition != null && _objTransition.size() > 0)
      children.add(_objTransition);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME! 
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    java.util.Vector all = new java.util.Vector(8);
    //Create 8 empty lists
    for (int i = 0; i < 3; i++)
    {
      GWFDeployableList list = new GWFDeployableList();
      all.add(list);
    }
    //Populate the lists
    ((GWFDeployableList)all.get(0)).addAll(java.util.Arrays.asList(this.getDocumentation()));
    ((GWFDeployableList)all.get(1)).addAll(java.util.Arrays.asList(this.getPerforms()));
    ((GWFDeployableList)all.get(2)).addAll(java.util.Arrays.asList(this.getTransition()));
    //Deploy attributes to database
    BpssBusinessPartnerRole bpssBusinessPartnerRole = new BpssBusinessPartnerRole();
    bpssBusinessPartnerRole.setRoleName(this.getName());
    //Deploy only those lists that are not empty
    int finalResult = 0;
    for (int i = 0; i < all.size(); i++)
    {
      if ((GWFDeployableList)all.get(i) != null)
      {
        GWFDeployableList data = (GWFDeployableList)all.get(i);
        int result = data.deploy(specUId, incomplete);
        finalResult = Utilities.combineResult(finalResult, result);
      }
    }
    try
    {
      AbstractEntityHandler handler = EntityHandlerFactory.getHandlerFor(
                                          BpssBusinessPartnerRole.ENTITY_NAME, 
                                          true);
      bpssBusinessPartnerRole = (BpssBusinessPartnerRole)handler.createEntity(
                                    bpssBusinessPartnerRole);
      BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
      bpssProcSpecEntry.setSpecUId(specUId);
      bpssProcSpecEntry.setEntryName(bpssBusinessPartnerRole.getRoleName());
      bpssProcSpecEntry.setEntryType(bpssBusinessPartnerRole.getEntityName());
      bpssProcSpecEntry.setEntryUId(bpssBusinessPartnerRole.getUId());
      handler = EntityHandlerFactory.getHandlerFor(
                    BpssProcessSpecEntry.ENTITY_NAME, true);
      //handler.create(bpssProcSpecEntry);
      bpssProcSpecEntry = (BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry); //NSL20051111

      for (int i = 0; i < all.size(); i++)
      {
        if ((GWFDeployableList)all.get(i) != null)
        {
          GWFDeployableList data = (GWFDeployableList)all.get(i);
          data.setParentEntryUId(specUId, bpssProcSpecEntry.getUId());
        }
      }
    }
    catch (Throwable th)
    {
      //TODO handle RemoteException, ParseException
      System.out.println(
          "Unable to deploy " + bpssBusinessPartnerRole.getEntityName());
      th.printStackTrace();
      throw new GWFException();
    }
    return finalResult;
    //    return 1;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
    try
    {
      Utilities.setParentEntryUId(specUId, parentEntryUId, this.getName(), 
                                  BpssBusinessPartnerRole.ENTITY_NAME);
    }
    catch (GWFException ex)
    {
      ex.printStackTrace();
      throw new GWFException();
    }
  }
  
  /**
   * Unmarshals the specified "BusinessPartnerRole" element back to a BusinessPartnerRole object.
   */
  public BusinessPartnerRole buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;


    /** Unmarshals "name" attribute */
  	super.setAttributeValue(name, elem.getAttribute("name"));

    /** Unmarshals "nameID" attribute */
  	super.setAttributeValue(nameID, elem.getAttribute("nameID"));

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                                    (GNElement)it1.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Performs objects. */
    Iterator it2 = elem.getChildren(Performs._tagName).iterator();
    while (it2.hasNext())
    {
    	Performs p = new Performs();
      addPerforms(p.buildModel(
                                               (GNElement)it2.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Transition objects. */
    Iterator it3 = elem.getChildren(Transition._tagName).iterator();
    while (it3.hasNext())
    {
    	Transition t = new Transition();
      addTransition(t.buildModel(
                                                 (GNElement)it3.next()));
    }
    return this;
  }
  
  /**
   * Marshals this object to an element.
   */
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());
  	
    /** Marshals "name" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, name);

    /** Marshals "nameID" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, nameID);

    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Performs objects to elements */
    Iterator it2 = _objPerforms.iterator();
    while (it2.hasNext())
    {
      Performs obj = (Performs)it2.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Transition objects to elements */
    Iterator it3 = _objTransition.iterator();
    while (it3.hasNext())
    {
      Transition obj = (Transition)it3.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
}
