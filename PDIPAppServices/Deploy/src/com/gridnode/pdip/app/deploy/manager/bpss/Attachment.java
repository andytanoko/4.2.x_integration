// %1023962278426:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: 
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The Attachment class represents the element "Attachment" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT Attachment (Documentation)*&gt;<br>
 */
public class Attachment
  extends AbstractBpssModel
  implements IGWFDeployable
{

  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 7261783393182101966L;

	/** xml tag name of this element. */
  public static String _tagName = "Attachment";
  
  /** Defines a isConfidential attribute */
  public GNAttribute isConfidential = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a name attribute */
  public GNAttribute name = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a mimeType attribute */
  public GNAttribute mimeType = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a businessDocument attribute */
  public GNAttribute businessDocument = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a isTamperProof attribute */
  public GNAttribute isTamperProof = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a specification attribute */
  public GNAttribute specification = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a nameID attribute */
  public GNAttribute nameID = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a businessDocumentIDRef attribute */
  public GNAttribute businessDocumentIDRef = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a version attribute */
  public GNAttribute version = GNXMLDocumentUtility.newAttribute("", "");
  
  /** Defines a isAuthenticated attribute */
  public GNAttribute isAuthenticated = GNXMLDocumentUtility.newAttribute("", "");
  
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /**
     * Creates an empty Attachment object
     */
  public Attachment()
  {
    super();
  }

  /**
     * Gets the value of "isConfidential" attribute.
     */
  public String getIsConfidential()
  {
    return isConfidential.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsConfidential(String value_)
  {
    isConfidential.setValue(value_);
  }

  /**
     * Gets the value of "name" attribute.
     */
  public String getName()
  {
    return name.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setName(String value_)
  {
    name.setValue(value_);
  }

  /**
     * Gets the value of "mimeType" attribute.
     */
  public String getMimeType()
  {
    return mimeType.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setMimeType(String value_)
  {
    mimeType.setValue(value_);
  }

  /**
     * Gets the value of "businessDocument" attribute.
     */
  public String getBusinessDocument()
  {
    return businessDocument.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessDocument(String value_)
  {
    businessDocument.setValue(value_);
  }

  /**
     * Gets the value of "isTamperProof" attribute.
     */
  public String getIsTamperProof()
  {
    return isTamperProof.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsTamperProof(String value_)
  {
    isTamperProof.setValue(value_);
  }

  /**
     * Gets the value of "specification" attribute.
     */
  public String getSpecification()
  {
    return specification.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setSpecification(String value_)
  {
    specification.setValue(value_);
  }

  /**
     * Gets the value of "nameID" attribute.
     */
  public String getNameID()
  {
    return nameID.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setNameID(String value_)
  {
    nameID.setValue(value_);
  }

  /**
     * Gets the value of "businessDocumentIDRef" attribute.
     */
  public String getBusinessDocumentIDRef()
  {
    return businessDocumentIDRef.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessDocumentIDRef(String value_)
  {
    businessDocumentIDRef.setValue(value_);
  }

  /**
     * Gets the value of "version" attribute.
     */
  public String getVersion()
  {
    return version.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setVersion(String value_)
  {
    version.setValue(value_);
  }

  /**
     * Gets the value of "isAuthenticated" attribute.
     */
  public String getIsAuthenticated()
  {
    return isAuthenticated.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsAuthenticated(String value_)
  {
    isAuthenticated.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }


  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME! 
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    return 1;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
  }
  
  /**
   * Unmarshals the specified "Attachment" element back to a Attachment object.
   */
  public Attachment buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;
  	
      /** Unmarshals "isConfidential" attribute */
  		setAttributeValue(isConfidential, elem.getAttribute("isConfidential"));

      /** Unmarshals "name" attribute */
  		setAttributeValue(name, elem.getAttribute("name"));

      /** Unmarshals "mimeType" attribute */
  		setAttributeValue(mimeType, elem.getAttribute("mimeType"));

      /** Unmarshals "businessDocument" attribute */
  		setAttributeValue(businessDocument, elem.getAttribute("businessDocument"));

      /** Unmarshals "isTamperProof" attribute */
  		setAttributeValue(isTamperProof, elem.getAttribute("isTamperProof"));

      /** Unmarshals "specification" attribute */
  		setAttributeValue(specification, elem.getAttribute("specification"));

      /** Unmarshals "nameID" attribute */
  		setAttributeValue(nameID, elem.getAttribute("nameID"));
    

      /** Unmarshals "businessDocumentIDRef" attribute */
  		setAttributeValue(businessDocumentIDRef, elem.getAttribute("businessDocumentIDRef"));
      
      /** Unmarshals "version" attribute */
  		setAttributeValue(version, elem.getAttribute("version"));

      /** Unmarshals "isAuthenticated" attribute */
  		setAttributeValue(isAuthenticated, elem.getAttribute("isAuthenticated"));

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                           (GNElement)it1.next()));
    }
    return this;
  }
  
  /**
   * Marshals this object to an element.
   */
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());

    /** Marshals "isConfidential" attribute */
  	addAttributeToElement(elem, "", isConfidential);

    /** Marshals "name" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, name);

    /** Marshals "mimeType" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, mimeType);

    /** Marshals "businessDocument" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, businessDocument);

    /** Marshals "isTamperProof" attribute */
  	addAttributeToElement(elem, "", isTamperProof);

    /** Marshals "specification" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, specification);

    /** Marshals "nameID" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, nameID);

    /** Marshals "businessDocumentIDRef" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, businessDocumentIDRef);

    /** Marshals "version" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, version);

    /** Marshals "isAuthenticated" attribute */
  	addAttributeToElement(elem, "", isAuthenticated);


    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
}