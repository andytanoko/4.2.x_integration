// %1023962282567:com.gridnode.pdip.app.deployment.ejb.manager%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File:
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Dec 08 2005   Tam Wei Xiang  i) Modified method loadBpss(File)
 *                              ii)Modified undeployBpss(File), undeployBpss(String, String),
 *                                          deployBpss(File).  The deploy() and undeploy()
 *                                          have been removed from ProcessSpecification.         
 */


/* Generated by Together  */
package com.gridnode.pdip.app.deploy.manager.ejb;


import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.gridnode.pdip.app.deploy.manager.IConstants;
import com.gridnode.pdip.app.deploy.manager.bpss.BpssModelHandler;
import com.gridnode.pdip.app.deploy.manager.bpss.ProcessSpecification;
import com.gridnode.pdip.app.deploy.manager.exceptions.DefinitionParserException;
import com.gridnode.pdip.app.deploy.manager.exceptions.DeploymentException;
import com.gridnode.pdip.app.deploy.manager.util.Logger;
import com.gridnode.pdip.app.deploy.manager.xpdl.XpdlParser;
import com.gridnode.pdip.base.gwfbase.xpdl.helpers.XpdlDefinitionCache;
import com.gridnode.pdip.base.gwfbase.xpdl.helpers.XpdlDefinitionHelper;
import com.gridnode.pdip.base.gwfbase.xpdl.model.XpdlPackage;
import com.gridnode.pdip.framework.db.entity.IEntity;
import com.gridnode.pdip.framework.db.filter.DataFilterImpl;
import com.gridnode.pdip.framework.db.filter.IDataFilter;
import com.gridnode.pdip.framework.util.UtilEntity;
 
public class GWFDeployMgrBean
  implements SessionBean,
             IConstants
{
  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = -5451027266945972956L;
	private SessionContext ctx;

  public void setSessionContext(SessionContext context)
                         throws RemoteException, EJBException
  {
    ctx = context;
  }

  public void ejbActivate()
                   throws RemoteException, EJBException
  {
  }

  public void ejbPassivate()
                    throws RemoteException, EJBException
  {
  }

  public void ejbRemove()
                 throws RemoteException, EJBException
  {
  }


  public void ejbCreate()
                 throws CreateException, RemoteException
  {
    // Write your code here
  }

  /**
   * This method will parse XPDL file and deploy into database
   * @param processSpec
   */
  public void deployXpdl(java.io.File processSpec) throws DefinitionParserException,DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.deployXpdl] Enter, processSpec="+processSpec);
    List createdList=new ArrayList();
    try
    {
      List xpdlModel = loadXpdl(processSpec);
      Iterator iterator = xpdlModel.iterator();
      XpdlPackage xpdlPackage = null;
      while(iterator.hasNext()){
        IEntity entity = (IEntity)iterator.next();
        if (XpdlPackage.ENTITY_NAME.equals(entity.getEntityName()))
        {
          xpdlPackage = (XpdlPackage)entity;
          break;
        }
      }
      //check package already exists
      if(xpdlPackage!=null){
        List tempModel=null;
        try{
            tempModel = XpdlDefinitionHelper.getPackageTree(xpdlPackage.getPackageId(),xpdlPackage.getVersionId());
        }catch(Exception e){
        }
        if(tempModel!=null && tempModel.size()>0){
            throw new DeploymentException("Xpdl package already exists,("+xpdlPackage.getPackageId()+","+xpdlPackage.getVersionId()+")");
        }
      } else throw new DeploymentException("Package element doesnot exist");

      iterator = xpdlModel.iterator();
      while (iterator.hasNext())
      {
        IEntity entity = (IEntity)iterator.next();
        createdList.add(UtilEntity.createEntity(entity, true));
      }
    }
    catch(DefinitionParserException ex)
    {
        throw ex;
    }
    catch (Throwable th)
    {
      for(Iterator iterator=createdList.iterator();iterator.hasNext();){
          IEntity entity=(IEntity)iterator.next();
          try{
            UtilEntity.remove((Long)entity.getKey(),entity.getEntityName(),true);
          }catch(Throwable inTh){
          }
      }
      throw new DeploymentException("Unable to deploy this Xpdl Package", th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.deployXpdl] Exit, processSpec="+processSpec);
    }
  }

  /**
   * This will set the XpdlPackage state to  STATE_DELETED
   * @param processSpec
   * @throws DefinitionParserException
   * @throws DeploymentException
   */
  public void markDeletedXpdl(java.io.File processSpec) throws DefinitionParserException,DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.markDeletedXpdl] Enter, processSpec="+processSpec);
    try
    {
      List xpdlModel = loadXpdl(processSpec);
      XpdlPackage xpdlPackage = null;
      Iterator iterator=xpdlModel.iterator();
      while (iterator.hasNext())
      {
        IEntity entity = (IEntity)iterator.next();
        if (XpdlPackage.ENTITY_NAME.equals(entity.getEntityName()))
        {
          xpdlPackage = (XpdlPackage)entity;
          break;
        }
      }
      if(xpdlPackage!=null)
      {
        String packageId=xpdlPackage.getPackageId();
        String pkgVersionId=xpdlPackage.getVersionId();
        IDataFilter filter = new DataFilterImpl();
        filter.addSingleFilter(null,XpdlPackage.PACKAGE_ID,filter.getEqualOperator(),packageId,false);
        filter.addSingleFilter(filter.getAndConnector(),XpdlPackage.VERSION_ID,filter.getEqualOperator(),pkgVersionId,false);
        Collection coll = UtilEntity.getEntityByFilter(filter,XpdlPackage.ENTITY_NAME,true);
        if(coll!=null && !coll.isEmpty())
        {
          xpdlPackage = (XpdlPackage)coll.iterator().next();
          xpdlPackage.setState(XpdlPackage.STATE_DELETED);
          UtilEntity.update(xpdlPackage,true);
        }
        else throw new Exception("No package found with packageId="+packageId+", pkgVersionId="+pkgVersionId);
      }
      else throw new Exception("Unable to find package information from the xpdlfile"); 
    }
    catch(DefinitionParserException ex)
    {
        throw ex;
    }
    catch (Throwable th)
    {
      throw new DeploymentException("Unable to markDeleted this Xpdl Package", th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.markDeletedXpdl] Exit, processSpec="+processSpec);
    }
    
  }


  /**
   * Removes the xpdl entities from database
   * @param processSpec
   */
  public void undeployXpdl(java.io.File processSpec) throws DefinitionParserException,DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.undeployXpdl] Enter, processSpec="+processSpec);
    try
    {
      List xpdlModel = loadXpdl(processSpec);
      XpdlPackage xpdlPackage = null;
      Iterator iterator=xpdlModel.iterator();
      while (iterator.hasNext())
      {
        IEntity entity = (IEntity)iterator.next();
        if (XpdlPackage.ENTITY_NAME.equals(entity.getEntityName()))
        {
          xpdlPackage = (XpdlPackage)entity;
          break;
        }
      }
      undeployXpdl(xpdlPackage.getPackageId(), xpdlPackage.getVersionId());
    }
    catch(DefinitionParserException ex)
    {
        throw ex;
    }
    catch (Throwable th)
    {
      throw new DeploymentException("Unable to undeploy this Xpdl Package", th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.undeployXpdl] Exit, processSpec="+processSpec);
    }
  }

  /**
   * Removes the xpdl entities from database
   * @param packageId
   * @param pkgVersionId
   */
  public void undeployXpdl(String packageId, String pkgVersionId) throws DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.undeployXpdl] Enter, packageId="+packageId+", pkgVersionId="+pkgVersionId);
    try{
      List xpdlModel = XpdlDefinitionHelper.getPackageTree(packageId,pkgVersionId);
      Iterator iterator = xpdlModel.iterator();
      while (iterator.hasNext())
      {
        IEntity entity = (IEntity)iterator.next();
        UtilEntity.remove((Long)entity.getKey(), entity.getEntityName(), true);
      }
      XpdlDefinitionCache.removeXpdlDefinitionCache(packageId,pkgVersionId);
    }
    catch (Throwable th)
    {
      throw new DeploymentException("Unable to undeploy this Xpdl Package, packageId="+packageId+", pkgVersionId="+pkgVersionId, th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.undeployXpdl] Exit, packageId="+packageId+", pkgVersionId="+pkgVersionId);
    }
  }


  /**
   * Loads the xpdl file into xpdl entities
   * @param processSpec
   * @return List of xpdl entities
   * @throws DefinitionParserException
   */
  public List loadXpdl(java.io.File processSpec) throws DefinitionParserException
  {
    try
    {
        List xpdlModel = XpdlParser.readXpdl(processSpec.toURL());
        if(xpdlModel==null)
            throw new DefinitionParserException("Unable to loadXpdl :"+processSpec.getAbsolutePath());
        return xpdlModel;
    }
    catch(java.net.MalformedURLException ex){
        throw new DefinitionParserException("Unable to get URL from filename :"+processSpec.getAbsolutePath(),ex);
    }
  }

  /**
   * This method will parse BPSS file and deploy into database
   * @param processSpec
   * @return
   */
  public int deployBpss(java.io.File processSpec) throws DefinitionParserException,DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.deployBpss] Enter, processSpec="+processSpec);
    ProcessSpecification _bpssModel=null;
    try
    {
      _bpssModel=loadBpss(processSpec);
      if(_bpssModel==null)
        throw new DefinitionParserException("ProcessSpecification is null");
      
      //TWX: deploy() has been moved out from ProcessSpec. Use BpssModelHandler instead.
      BpssModelHandler handler = new BpssModelHandler();
      int result = handler.deploy(_bpssModel);
      return result;
    }
    catch(DefinitionParserException ex)
    {
    	Logger.warn("[GWFDeployMgrBean.deployBpss] Invalid Process Specification", ex);
        throw ex;
    }
    catch (Throwable th)
    {
    	Logger.warn("[GWFDeployMgrBean.deployBpss] Unexpected problem with Process Specification", th);
      try{
      	if (_bpssModel != null)
      	{
          undeployBpss(_bpssModel.getUuid(),_bpssModel.getVersion());
      	}
      }catch(DeploymentException ex){
      }
      throw new DeploymentException("Unable to deploy this process specification",th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.deployBpss] Exit, processSpec="+processSpec);
    }
  }

  /**
   * This method removes the bpss entities from database
   * @param processSpec
   * @return
   */
  public int undeployBpss(String uUId,String version) throws DeploymentException
  {
    Logger.log("[GWFDeployMgrBean.undeployBpss] Enter, uUId="+uUId+", version="+version);
    try
    {
      System.out.println("Inside undeployBpss of DeployManager");
      
      //TWX: undeploy() has been moved out from ProcessSpec. Use BpssModelHandler instead.
      BpssModelHandler handler = new BpssModelHandler();
      return handler.undeploy(uUId, version);
    }
    catch (Throwable th)
    {
      throw new DeploymentException("Unable to undeploy this process specification",th);
    }
    finally
    {
      Logger.log("[GWFDeployMgrBean.undeployBpss] Exit, uUId="+uUId+", version="+version);
    }
  }



  /**
   * This method removes the bpss entities from database
   * @param processSpec
   * @return
   */
  public int undeployBpss(java.io.File processSpec) throws DefinitionParserException,DeploymentException
  {

    Logger.log("[GWFDeployMgrBean.undeployBpss] processSpec="+processSpec);
    ProcessSpecification _bpssModel=null;
    try
    {
      _bpssModel=loadBpss(processSpec);
      if(_bpssModel==null)
        throw new DefinitionParserException("ProcessSpecification is null");
    }
    catch (Throwable th)
    {
      throw new DefinitionParserException("Unable to load this process specification,processSpec="+processSpec,th);
    }


    try
    {
      System.out.println("Inside undeployBpss of DeployManager");
      
      //TWX: undeploy() has been moved out from ProcessSpec. Use BpssModelHandler instead.
      BpssModelHandler handler = new BpssModelHandler();
      int result = handler.undeploy(_bpssModel);
      return result;
    }
    catch (Throwable th)
    {
      throw new DeploymentException("Unable to undeploy this process specification",th);
    }
    

  }

  /**
   * This method loads the bpss file and validates aganist its dtd
   * @param processSpec
   * @return
   * @throws DefinitionParserException
   */
  public ProcessSpecification loadBpss(java.io.File processSpec)  throws DefinitionParserException
  {
    //_bpssModel = new ProcessSpecification();
    try{
    		BpssModelHandler handler = new BpssModelHandler();
    		
    		ProcessSpecification bpssModel =  handler.loadModel(processSpec);
    		
    		if(bpssModel != null)
    		{
    			return bpssModel;
    		}
    		/*
        ProcessSpecification _bpssModel = ProcessSpecification.unmarshal(processSpec);
        if (_bpssModel != null)
        {
          if (_bpssModel.validate(true) == null)
          {
            return _bpssModel;
          }
        } */
    }catch(Exception ex){
        throw new DefinitionParserException("Unable to load Bpss  :"+processSpec.getAbsolutePath(),ex);
    }
    throw new DefinitionParserException("Unable to loadBpss :"+processSpec.getAbsolutePath());
  }

  /**
     * @ejbTransactionAttribute Required
     */
  public void synchronize()
  {
  }

  /**
   * DOCUMENT ME!
   */
  public void save()
  {
  }
}