// %1023962280145:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File:
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Nov 11 2005    Neo Sok Lay         Change to use entityHandler.createEntity
 *                                    to ensure created entity has the correct populated UID
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.GWFDeployableList;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssDocumentEnvelope;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The DocumentEnvelope class represents the element "DocumentEnvelope" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT DocumentEnvelope (Documentation*,Attachment*)&gt;<br>
 */
public class DocumentEnvelope
  extends AbstractBpssModel
  implements IGWFDeployable
{

  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 5521181941357138927L;

	/** xml tag name of this element. */
  public static String _tagName = "DocumentEnvelope";

  /** Defines a isTamperProof attribute */
  public GNAttribute isTamperProof = GNXMLDocumentUtility.newAttribute("isTamperProof", "");
  
  /** Defines a isAuthenticated attribute */
  public GNAttribute isAuthenticated = GNXMLDocumentUtility.newAttribute("isAuthenticated", "");
  
  /** Defines a businessDocument attribute */
  public GNAttribute businessDocument = GNXMLDocumentUtility.newAttribute("businessDocument", "");
  
  /** Defines a isConfidential attribute */
  public GNAttribute isConfidential = GNXMLDocumentUtility.newAttribute("isConfidential", "");
  
  /** Defines a isPositiveResponse attribute */
  public GNAttribute isPositiveResponse = GNXMLDocumentUtility.newAttribute("isPositiveResponse", "");
  
  /** Defines a businessDocumentIDRef attribute */
  public GNAttribute businessDocumentIDRef = GNXMLDocumentUtility.newAttribute("businessDocumentIDRef", "");
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /** Defines a list of Attachment objects. */
  protected ArrayList _objAttachment = new ArrayList();

  /**
     * Creates an empty DocumentEnvelope object
     */
  public DocumentEnvelope()
  {
    super();
  }

  /**
     * Gets the value of "isTamperProof" attribute.
     */
  public String getIsTamperProof()
  {
    return isTamperProof.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsTamperProof(String value_)
  {
    isTamperProof.setValue(value_);
  }

  /**
     * Gets the value of "isAuthenticated" attribute.
     */
  public String getIsAuthenticated()
  {
    return isAuthenticated.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsAuthenticated(String value_)
  {
    isAuthenticated.setValue(value_);
  }

  /**
     * Gets the value of "businessDocument" attribute.
     */
  public String getBusinessDocument()
  {
    return businessDocument.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessDocument(String value_)
  {
    businessDocument.setValue(value_);
  }

  /**
     * Gets the value of "isConfidential" attribute.
     */
  public String getIsConfidential()
  {
    return isConfidential.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsConfidential(String value_)
  {
    isConfidential.setValue(value_);
  }

  /**
     * Gets the value of "isPositiveResponse" attribute.
     */
  public String getIsPositiveResponse()
  {
    return isPositiveResponse.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsPositiveResponse(String value_)
  {
    isPositiveResponse.setValue(value_);
  }

  /**
     * Gets the value of "businessDocumentIDRef" attribute.
     */
  public String getBusinessDocumentIDRef()
  {
    return businessDocumentIDRef.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessDocumentIDRef(String value_)
  {
    businessDocumentIDRef.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }

  /**
     * Returns an array of Attachment objects. The length of the returned
     * array is zero if the list of Attachment object is empty.
     */
  public Attachment[] getAttachment()
  {
    return (Attachment[])_objAttachment.toArray(new Attachment[0]);
  }

  /**
     * Replaces all existing Attachment objects with a new array of
     * Attachment objects.
     * @param objArray    an array of Attachment objects.
     */
  public void setAttachment(Attachment[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objAttachment.clear();
    else
    {
      this._objAttachment = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Attachment object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Attachment getAttachment(int index)
  {
    return (Attachment)_objAttachment.get(index);
  }

  /**
     * Replaces an existing Attachment object at the specified index with
     * a new Attachment object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setAttachment(int index, Attachment obj)
  {
    if (obj == null)
      removeAttachment(index);
    else
    {
      _objAttachment.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Attachment objects in the list.
     */
  public int getAttachmentCount()
  {
    return _objAttachment.size();
  }

  /**
     * Returns <code>true</code> if there is no Attachment object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoAttachment()
  {
    return _objAttachment.size() == 0;
  }

  /**
     * Returns a read-only list of Attachment objects.
     */
  public List getAttachmentList()
  {
    return Collections.unmodifiableList(_objAttachment);
  }

  /**
     * Adds a new Attachment object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addAttachment(Attachment obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objAttachment.add(obj);
  }

  /**
     * Adds a list of new Attachment objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addAttachment(Collection coAttachment)
  {
    if (coAttachment == null)
      return false;
    java.util.Iterator it = coAttachment.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objAttachment.addAll(coAttachment);
  }

  /**
     * Removes an existing Attachment object at the specified index.
     * @return    The removed object.
     */
  public Attachment removeAttachment(int index)
  {
    return (Attachment)_objAttachment.remove(index);
  }

  /**
     * Removes the specified Attachment object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeAttachment(Attachment obj)
  {
    return _objAttachment.remove(obj);
  }

  /**
     * Clears all Attachment objects from the list.
     */
  public void clearAttachmentList()
  {
    _objAttachment.clear();
  }

  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);

    /** adds _objAttachment */
    if (_objAttachment != null && _objAttachment.size() > 0)
      children.add(_objAttachment);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    java.util.Vector all = new java.util.Vector(8);
    //Create 2 empty lists
    for (int i = 0; i < 2; i++)
    {
      GWFDeployableList list = new GWFDeployableList();
      all.add(list);
    }

    ((GWFDeployableList)all.get(0)).addAll(java.util.Arrays.asList(this.getDocumentation()));
    ((GWFDeployableList)all.get(1)).addAll(java.util.Arrays.asList(this.getAttachment()));

    //Deploy only those lists that are not empty
    int finalResult = 0;
    for (int i = 0; i < all.size(); i++)
    {
      if ((GWFDeployableList)all.get(i) != null)
      {
        GWFDeployableList data = (GWFDeployableList)all.get(i);
        int result = data.deploy(specUId, incomplete);
        finalResult = Utilities.combineResult(finalResult, result);
      }
    }


    BpssDocumentEnvelope docEnvelope=new BpssDocumentEnvelope();
    docEnvelope.setBusinessDocumentName(this.getBusinessDocument());
    docEnvelope.setBusinessDocumentIDRef(this.getBusinessDocumentIDRef());
    if(this.getIsAuthenticated()!=null)
        docEnvelope.setIsAuthenticated(new Boolean(this.getIsAuthenticated()));
    if(this.getIsConfidential()!=null)
        docEnvelope.setIsConfidential(new Boolean(this.getIsConfidential()));
    if(this.getIsPositiveResponse()!=null)
        docEnvelope.setIsPositiveResponse(new Boolean(this.getIsPositiveResponse()));
    if(this.getIsTamperProof()!=null)
        docEnvelope.setIsTamperProof(new Boolean(this.getIsTamperProof()));
    //incomplete.put(this, bpssBizTrans);
    try
    {
      AbstractEntityHandler handler = EntityHandlerFactory.getHandlerFor(
                                          BpssDocumentEnvelope.ENTITY_NAME, true);
      docEnvelope = (BpssDocumentEnvelope)handler.createEntity(docEnvelope);
      BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
      bpssProcSpecEntry.setSpecUId(specUId);
      bpssProcSpecEntry.setEntryName(docEnvelope.getBusinessDocumentName());
      bpssProcSpecEntry.setEntryType(docEnvelope.getEntityName());
      bpssProcSpecEntry.setEntryUId(docEnvelope.getUId());
      handler = EntityHandlerFactory.getHandlerFor(
                    BpssProcessSpecEntry.ENTITY_NAME, true);
      //handler.createEntity(bpssProcSpecEntry);
      bpssProcSpecEntry = (BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry); //NSL20051111

      for (int i = 0; i < all.size(); i++)
      {
        if ((GWFDeployableList)all.get(i) != null)
        {
          GWFDeployableList data = (GWFDeployableList)all.get(i);
          data.setParentEntryUId(specUId, bpssProcSpecEntry.getUId());
        }
      }
    }
    catch (Throwable th)
    {
      //TODO handle RemoteException, ParseException
      System.out.println("Unable to deploy " + docEnvelope.getEntityName());
      th.printStackTrace();
      throw new GWFException(th);
    }
    return finalResult;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
    try
    {
      Utilities.setParentEntryUId(specUId, parentEntryUId, this.getBusinessDocument(),
                                  BpssDocumentEnvelope.ENTITY_NAME);
    }
    catch (GWFException ex)
    {
      ex.printStackTrace();
      throw new GWFException();
    }

  }
  
  /**
   * Unmarshals the specified "DocumentEnvelope" element back to a DocumentEnvelope object.
   */
  public DocumentEnvelope buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;


      /** Unmarshals "isTamperProof" attribute */
  		super.setAttributeValue(isTamperProof, elem.getAttribute(
                                                       "isTamperProof"));

      /** Unmarshals "isAuthenticated" attribute */
  		super.setAttributeValue(isAuthenticated, elem.getAttribute("isAuthenticated"));

      /** Unmarshals "businessDocument" attribute */
  		super.setAttributeValue(businessDocument, elem.getAttribute("businessDocument"));
      
      /** Unmarshals "isConfidential" attribute */
  		super.setAttributeValue(isConfidential, elem.getAttribute("isConfidential"));

      /** Unmarshals "isPositiveResponse" attribute */
  		super.setAttributeValue(isPositiveResponse, elem.getAttribute("isPositiveResponse"));
      
      /** Unmarshals "businessDocumentIDRef" attribute */
  		super.setAttributeValue(businessDocumentIDRef, elem.getAttribute("businessDocumentIDRef"));
      
    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                                 (GNElement)it1.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Attachment objects. */
    Iterator it2 = elem.getChildren(Attachment._tagName).iterator();
    while (it2.hasNext())
    {
    	Attachment att = new Attachment();
      addAttachment(att.buildModel(
                                              (GNElement)it2.next()));
    }
    return this;
  }
  
  /**
   * Marshals this object to an element.
   */
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());

    /** Marshals "isTamperProof" attribute */
  	addAttributeToElement(elem, "", isTamperProof);

    /** Marshals "isAuthenticated" attribute */
  	addAttributeToElement(elem, "", isAuthenticated);

    /** Marshals "businessDocument" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, businessDocument);

    /** Marshals "isConfidential" attribute */
  	addAttributeToElement(elem, "", isConfidential);

    /** Marshals "isPositiveResponse" attribute */
  	addAttributeToElement(elem, "", isPositiveResponse);
    

    /** Marshals "businessDocumentIDRef" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, businessDocumentIDRef);

    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Attachment objects to elements */
    Iterator it2 = _objAttachment.iterator();
    while (it2.hasNext())
    {
      Attachment obj = (Attachment)it2.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
  
}