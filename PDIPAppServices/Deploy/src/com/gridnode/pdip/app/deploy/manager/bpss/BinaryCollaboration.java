// %1023962278926:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: 
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Nov 11 2005    Neo Sok Lay         Change to use entityHandler.createEntity
 *                                    to ensure created entity has the correct populated UID
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.GWFDeployableList;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssBinaryCollaboration;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The BinaryCollaboration class represents the element "BinaryCollaboration" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT BinaryCollaboration (Documentation*,InitiatingRole,RespondingRole,(Documentation*|Start|Transition|Success|Failure|BusinessTransactionActivity|CollaborationActivity|Fork|Join)*)&gt;<br>
 */
public class BinaryCollaboration
  extends AbstractBpssModel
  implements IGWFDeployable
{
  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 7456982783460607521L;

	public long UId;

  /** xml tag name of this element. */
  public static String _tagName = "BinaryCollaboration";

  
  /** Defines a beginsWhen attribute */
  public GNAttribute beginsWhen = GNXMLDocumentUtility.newAttribute("beginsWhen", "");
  
  
  /** Defines a endsWhen attribute */
  public GNAttribute endsWhen = GNXMLDocumentUtility.newAttribute("endsWhen", "");
  
  /** Defines a name attribute */
  public GNAttribute name = GNXMLDocumentUtility.newAttribute("name", "");
  
  /** Defines a postCondition attribute */
  public GNAttribute postCondition = GNXMLDocumentUtility.newAttribute("postCondition", "");
  
  /** Defines a pattern attribute */
  public GNAttribute pattern = GNXMLDocumentUtility.newAttribute("pattern", "");
  
  /** Defines a nameID attribute */
  public GNAttribute nameID = GNXMLDocumentUtility.newAttribute("nameID", "");
  
  /** Defines a preCondition attribute */
  public GNAttribute preCondition = GNXMLDocumentUtility.newAttribute("preCondition", "");
  
  /** Defines a timeToPerform attribute */
  public GNAttribute timeToPerform = GNXMLDocumentUtility.newAttribute("timeToPerform", "");
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /** Defines a InitiatingRole object */
  protected InitiatingRole _objInitiatingRole;

  /** Defines a RespondingRole object */
  protected RespondingRole _objRespondingRole;

  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation1 = new ArrayList();

  /** Defines a list of Start objects. */
  protected ArrayList _objStart = new ArrayList();

  /** Defines a list of Transition objects. */
  protected ArrayList _objTransition = new ArrayList();

  /** Defines a list of Success objects. */
  protected ArrayList _objSuccess = new ArrayList();

  /** Defines a list of Failure objects. */
  protected ArrayList _objFailure = new ArrayList();

  /** Defines a list of BusinessTransactionActivity objects. */
  protected ArrayList _objBusinessTransactionActivity = new ArrayList();

  /** Defines a list of CollaborationActivity objects. */
  protected ArrayList _objCollaborationActivity = new ArrayList();

  /** Defines a list of Fork objects. */
  protected ArrayList _objFork = new ArrayList();

  /** Defines a list of Join objects. */
  protected ArrayList _objJoin = new ArrayList();

  /**
     * Creates an empty BinaryCollaboration object
     */
  public BinaryCollaboration()
  {
    super();
  }

  /**
     * Gets the value of "beginsWhen" attribute.
     */
  public String getBeginsWhen()
  {
    return beginsWhen.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBeginsWhen(String value_)
  {
    beginsWhen.setValue(value_);
  }

  /**
     * Gets the value of "endsWhen" attribute.
     */
  public String getEndsWhen()
  {
    return endsWhen.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setEndsWhen(String value_)
  {
    endsWhen.setValue(value_);
  }

  /**
     * Gets the value of "name" attribute.
     */
  public String getName()
  {
    return name.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setName(String value_)
  {
    name.setValue(value_);
  }

  /**
     * Gets the value of "postCondition" attribute.
     */
  public String getPostCondition()
  {
    return postCondition.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setPostCondition(String value_)
  {
    postCondition.setValue(value_);
  }

  /**
     * Gets the value of "pattern" attribute.
     */
  public String getPattern()
  {
    return pattern.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setPattern(String value_)
  {
    pattern.setValue(value_);
  }

  /**
     * Gets the value of "nameID" attribute.
     */
  public String getNameID()
  {
    return nameID.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setNameID(String value_)
  {
    nameID.setValue(value_);
  }

  /**
     * Gets the value of "preCondition" attribute.
     */
  public String getPreCondition()
  {
    return preCondition.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setPreCondition(String value_)
  {
    preCondition.setValue(value_);
  }

  /**
     * Gets the value of "timeToPerform" attribute.
     */
  public String getTimeToPerform()
  {
    return timeToPerform.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setTimeToPerform(String value_)
  {
    timeToPerform.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }

  /**
     * Gets InitiatingRole object.
     */
  public InitiatingRole getInitiatingRole()
  {
    return _objInitiatingRole;
  }

  /**
     * Replaces the existing InitiatingRole object with a new object.
     * If you pass in a null value to this method, the InitiatingRole object is
     * cleared and will not be marshaled.
     * @param obj    A new object.
     */
  public void setInitiatingRole(InitiatingRole obj)
  {
    this._objInitiatingRole = obj;
    if (obj == null)
      return;
    obj.setParent(this);
  }

  /**
     * Gets RespondingRole object.
     */
  public RespondingRole getRespondingRole()
  {
    return _objRespondingRole;
  }

  /**
     * Replaces the existing RespondingRole object with a new object.
     * If you pass in a null value to this method, the RespondingRole object is
     * cleared and will not be marshaled.
     * @param obj    A new object.
     */
  public void setRespondingRole(RespondingRole obj)
  {
    this._objRespondingRole = obj;
    if (obj == null)
      return;
    obj.setParent(this);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation1()
  {
    return (Documentation[])_objDocumentation1.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation1(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation1.clear();
    else
    {
      this._objDocumentation1 = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation1(int index)
  {
    return (Documentation)_objDocumentation1.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation1(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation1(index);
    else
    {
      _objDocumentation1.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount1()
  {
    return _objDocumentation1.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation1()
  {
    return _objDocumentation1.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList1()
  {
    return Collections.unmodifiableList(_objDocumentation1);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation1(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation1.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation1(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation1.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation1(int index)
  {
    return (Documentation)_objDocumentation1.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation1(Documentation obj)
  {
    return _objDocumentation1.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList1()
  {
    _objDocumentation1.clear();
  }

  /**
     * Returns an array of Start objects. The length of the returned
     * array is zero if the list of Start object is empty.
     */
  public Start[] getStart()
  {
    return (Start[])_objStart.toArray(new Start[0]);
  }

  /**
     * Replaces all existing Start objects with a new array of
     * Start objects.
     * @param objArray    an array of Start objects.
     */
  public void setStart(Start[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objStart.clear();
    else
    {
      this._objStart = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Start object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Start getStart(int index)
  {
    return (Start)_objStart.get(index);
  }

  /**
     * Replaces an existing Start object at the specified index with
     * a new Start object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setStart(int index, Start obj)
  {
    if (obj == null)
      removeStart(index);
    else
    {
      _objStart.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Start objects in the list.
     */
  public int getStartCount()
  {
    return _objStart.size();
  }

  /**
     * Returns <code>true</code> if there is no Start object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoStart()
  {
    return _objStart.size() == 0;
  }

  /**
     * Returns a read-only list of Start objects.
     */
  public List getStartList()
  {
    return Collections.unmodifiableList(_objStart);
  }

  /**
     * Adds a new Start object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addStart(Start obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objStart.add(obj);
  }

  /**
     * Adds a list of new Start objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addStart(Collection coStart)
  {
    if (coStart == null)
      return false;
    java.util.Iterator it = coStart.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objStart.addAll(coStart);
  }

  /**
     * Removes an existing Start object at the specified index.
     * @return    The removed object.
     */
  public Start removeStart(int index)
  {
    return (Start)_objStart.remove(index);
  }

  /**
     * Removes the specified Start object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeStart(Start obj)
  {
    return _objStart.remove(obj);
  }

  /**
     * Clears all Start objects from the list.
     */
  public void clearStartList()
  {
    _objStart.clear();
  }

  /**
     * Returns an array of Transition objects. The length of the returned
     * array is zero if the list of Transition object is empty.
     */
  public Transition[] getTransition()
  {
    return (Transition[])_objTransition.toArray(new Transition[0]);
  }

  /**
     * Replaces all existing Transition objects with a new array of
     * Transition objects.
     * @param objArray    an array of Transition objects.
     */
  public void setTransition(Transition[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objTransition.clear();
    else
    {
      this._objTransition = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Transition object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Transition getTransition(int index)
  {
    return (Transition)_objTransition.get(index);
  }

  /**
     * Replaces an existing Transition object at the specified index with
     * a new Transition object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setTransition(int index, Transition obj)
  {
    if (obj == null)
      removeTransition(index);
    else
    {
      _objTransition.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Transition objects in the list.
     */
  public int getTransitionCount()
  {
    return _objTransition.size();
  }

  /**
     * Returns <code>true</code> if there is no Transition object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoTransition()
  {
    return _objTransition.size() == 0;
  }

  /**
     * Returns a read-only list of Transition objects.
     */
  public List getTransitionList()
  {
    return Collections.unmodifiableList(_objTransition);
  }

  /**
     * Adds a new Transition object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addTransition(Transition obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objTransition.add(obj);
  }

  /**
     * Adds a list of new Transition objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addTransition(Collection coTransition)
  {
    if (coTransition == null)
      return false;
    java.util.Iterator it = coTransition.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objTransition.addAll(coTransition);
  }

  /**
     * Removes an existing Transition object at the specified index.
     * @return    The removed object.
     */
  public Transition removeTransition(int index)
  {
    return (Transition)_objTransition.remove(index);
  }

  /**
     * Removes the specified Transition object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeTransition(Transition obj)
  {
    return _objTransition.remove(obj);
  }

  /**
     * Clears all Transition objects from the list.
     */
  public void clearTransitionList()
  {
    _objTransition.clear();
  }

  /**
     * Returns an array of Success objects. The length of the returned
     * array is zero if the list of Success object is empty.
     */
  public Success[] getSuccess()
  {
    return (Success[])_objSuccess.toArray(new Success[0]);
  }

  /**
     * Replaces all existing Success objects with a new array of
     * Success objects.
     * @param objArray    an array of Success objects.
     */
  public void setSuccess(Success[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objSuccess.clear();
    else
    {
      this._objSuccess = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Success object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Success getSuccess(int index)
  {
    return (Success)_objSuccess.get(index);
  }

  /**
     * Replaces an existing Success object at the specified index with
     * a new Success object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setSuccess(int index, Success obj)
  {
    if (obj == null)
      removeSuccess(index);
    else
    {
      _objSuccess.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Success objects in the list.
     */
  public int getSuccessCount()
  {
    return _objSuccess.size();
  }

  /**
     * Returns <code>true</code> if there is no Success object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoSuccess()
  {
    return _objSuccess.size() == 0;
  }

  /**
     * Returns a read-only list of Success objects.
     */
  public List getSuccessList()
  {
    return Collections.unmodifiableList(_objSuccess);
  }

  /**
     * Adds a new Success object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addSuccess(Success obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objSuccess.add(obj);
  }

  /**
     * Adds a list of new Success objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addSuccess(Collection coSuccess)
  {
    if (coSuccess == null)
      return false;
    java.util.Iterator it = coSuccess.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objSuccess.addAll(coSuccess);
  }

  /**
     * Removes an existing Success object at the specified index.
     * @return    The removed object.
     */
  public Success removeSuccess(int index)
  {
    return (Success)_objSuccess.remove(index);
  }

  /**
     * Removes the specified Success object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeSuccess(Success obj)
  {
    return _objSuccess.remove(obj);
  }

  /**
     * Clears all Success objects from the list.
     */
  public void clearSuccessList()
  {
    _objSuccess.clear();
  }

  /**
     * Returns an array of Failure objects. The length of the returned
     * array is zero if the list of Failure object is empty.
     */
  public Failure[] getFailure()
  {
    return (Failure[])_objFailure.toArray(new Failure[0]);
  }

  /**
     * Replaces all existing Failure objects with a new array of
     * Failure objects.
     * @param objArray    an array of Failure objects.
     */
  public void setFailure(Failure[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objFailure.clear();
    else
    {
      this._objFailure = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Failure object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Failure getFailure(int index)
  {
    return (Failure)_objFailure.get(index);
  }

  /**
     * Replaces an existing Failure object at the specified index with
     * a new Failure object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setFailure(int index, Failure obj)
  {
    if (obj == null)
      removeFailure(index);
    else
    {
      _objFailure.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Failure objects in the list.
     */
  public int getFailureCount()
  {
    return _objFailure.size();
  }

  /**
     * Returns <code>true</code> if there is no Failure object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoFailure()
  {
    return _objFailure.size() == 0;
  }

  /**
     * Returns a read-only list of Failure objects.
     */
  public List getFailureList()
  {
    return Collections.unmodifiableList(_objFailure);
  }

  /**
     * Adds a new Failure object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addFailure(Failure obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objFailure.add(obj);
  }

  /**
     * Adds a list of new Failure objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addFailure(Collection coFailure)
  {
    if (coFailure == null)
      return false;
    java.util.Iterator it = coFailure.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objFailure.addAll(coFailure);
  }

  /**
     * Removes an existing Failure object at the specified index.
     * @return    The removed object.
     */
  public Failure removeFailure(int index)
  {
    return (Failure)_objFailure.remove(index);
  }

  /**
     * Removes the specified Failure object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeFailure(Failure obj)
  {
    return _objFailure.remove(obj);
  }

  /**
     * Clears all Failure objects from the list.
     */
  public void clearFailureList()
  {
    _objFailure.clear();
  }

  /**
     * Returns an array of BusinessTransactionActivity objects. The length of the returned
     * array is zero if the list of BusinessTransactionActivity object is empty.
     */
  public BusinessTransactionActivity[] getBusinessTransactionActivity()
  {
    return (BusinessTransactionActivity[])_objBusinessTransactionActivity.toArray(
                 new BusinessTransactionActivity[0]);
  }

  /**
     * Replaces all existing BusinessTransactionActivity objects with a new array of
     * BusinessTransactionActivity objects.
     * @param objArray    an array of BusinessTransactionActivity objects.
     */
  public void setBusinessTransactionActivity(BusinessTransactionActivity[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objBusinessTransactionActivity.clear();
    else
    {
      this._objBusinessTransactionActivity = new ArrayList(Arrays.asList(
                                                               objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the BusinessTransactionActivity object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public BusinessTransactionActivity getBusinessTransactionActivity(int index)
  {
    return (BusinessTransactionActivity)_objBusinessTransactionActivity.get(
               index);
  }

  /**
     * Replaces an existing BusinessTransactionActivity object at the specified index with
     * a new BusinessTransactionActivity object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setBusinessTransactionActivity(int index, 
                                             BusinessTransactionActivity obj)
  {
    if (obj == null)
      removeBusinessTransactionActivity(index);
    else
    {
      _objBusinessTransactionActivity.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of BusinessTransactionActivity objects in the list.
     */
  public int getBusinessTransactionActivityCount()
  {
    return _objBusinessTransactionActivity.size();
  }

  /**
     * Returns <code>true</code> if there is no BusinessTransactionActivity object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoBusinessTransactionActivity()
  {
    return _objBusinessTransactionActivity.size() == 0;
  }

  /**
     * Returns a read-only list of BusinessTransactionActivity objects.
     */
  public List getBusinessTransactionActivityList()
  {
    return Collections.unmodifiableList(_objBusinessTransactionActivity);
  }

  /**
     * Adds a new BusinessTransactionActivity object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addBusinessTransactionActivity(BusinessTransactionActivity obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objBusinessTransactionActivity.add(obj);
  }

  /**
     * Adds a list of new BusinessTransactionActivity objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addBusinessTransactionActivity(Collection coBusinessTransactionActivity)
  {
    if (coBusinessTransactionActivity == null)
      return false;
    java.util.Iterator it = coBusinessTransactionActivity.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objBusinessTransactionActivity.addAll(
               coBusinessTransactionActivity);
  }

  /**
     * Removes an existing BusinessTransactionActivity object at the specified index.
     * @return    The removed object.
     */
  public BusinessTransactionActivity removeBusinessTransactionActivity(int index)
  {
    return (BusinessTransactionActivity)_objBusinessTransactionActivity.remove(
               index);
  }

  /**
     * Removes the specified BusinessTransactionActivity object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeBusinessTransactionActivity(BusinessTransactionActivity obj)
  {
    return _objBusinessTransactionActivity.remove(obj);
  }

  /**
     * Clears all BusinessTransactionActivity objects from the list.
     */
  public void clearBusinessTransactionActivityList()
  {
    _objBusinessTransactionActivity.clear();
  }

  /**
     * Returns an array of CollaborationActivity objects. The length of the returned
     * array is zero if the list of CollaborationActivity object is empty.
     */
  public CollaborationActivity[] getCollaborationActivity()
  {
    return (CollaborationActivity[])_objCollaborationActivity.toArray(
                 new CollaborationActivity[0]);
  }

  /**
     * Replaces all existing CollaborationActivity objects with a new array of
     * CollaborationActivity objects.
     * @param objArray    an array of CollaborationActivity objects.
     */
  public void setCollaborationActivity(CollaborationActivity[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objCollaborationActivity.clear();
    else
    {
      this._objCollaborationActivity = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the CollaborationActivity object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public CollaborationActivity getCollaborationActivity(int index)
  {
    return (CollaborationActivity)_objCollaborationActivity.get(index);
  }

  /**
     * Replaces an existing CollaborationActivity object at the specified index with
     * a new CollaborationActivity object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setCollaborationActivity(int index, CollaborationActivity obj)
  {
    if (obj == null)
      removeCollaborationActivity(index);
    else
    {
      _objCollaborationActivity.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of CollaborationActivity objects in the list.
     */
  public int getCollaborationActivityCount()
  {
    return _objCollaborationActivity.size();
  }

  /**
     * Returns <code>true</code> if there is no CollaborationActivity object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoCollaborationActivity()
  {
    return _objCollaborationActivity.size() == 0;
  }

  /**
     * Returns a read-only list of CollaborationActivity objects.
     */
  public List getCollaborationActivityList()
  {
    return Collections.unmodifiableList(_objCollaborationActivity);
  }

  /**
     * Adds a new CollaborationActivity object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addCollaborationActivity(CollaborationActivity obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objCollaborationActivity.add(obj);
  }

  /**
     * Adds a list of new CollaborationActivity objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addCollaborationActivity(Collection coCollaborationActivity)
  {
    if (coCollaborationActivity == null)
      return false;
    java.util.Iterator it = coCollaborationActivity.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objCollaborationActivity.addAll(coCollaborationActivity);
  }

  /**
     * Removes an existing CollaborationActivity object at the specified index.
     * @return    The removed object.
     */
  public CollaborationActivity removeCollaborationActivity(int index)
  {
    return (CollaborationActivity)_objCollaborationActivity.remove(index);
  }

  /**
     * Removes the specified CollaborationActivity object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeCollaborationActivity(CollaborationActivity obj)
  {
    return _objCollaborationActivity.remove(obj);
  }

  /**
     * Clears all CollaborationActivity objects from the list.
     */
  public void clearCollaborationActivityList()
  {
    _objCollaborationActivity.clear();
  }

  /**
     * Returns an array of Fork objects. The length of the returned
     * array is zero if the list of Fork object is empty.
     */
  public Fork[] getFork()
  {
    return (Fork[])_objFork.toArray(new Fork[0]);
  }

  /**
     * Replaces all existing Fork objects with a new array of
     * Fork objects.
     * @param objArray    an array of Fork objects.
     */
  public void setFork(Fork[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objFork.clear();
    else
    {
      this._objFork = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Fork object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Fork getFork(int index)
  {
    return (Fork)_objFork.get(index);
  }

  /**
     * Replaces an existing Fork object at the specified index with
     * a new Fork object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setFork(int index, Fork obj)
  {
    if (obj == null)
      removeFork(index);
    else
    {
      _objFork.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Fork objects in the list.
     */
  public int getForkCount()
  {
    return _objFork.size();
  }

  /**
     * Returns <code>true</code> if there is no Fork object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoFork()
  {
    return _objFork.size() == 0;
  }

  /**
     * Returns a read-only list of Fork objects.
     */
  public List getForkList()
  {
    return Collections.unmodifiableList(_objFork);
  }

  /**
     * Adds a new Fork object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addFork(Fork obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objFork.add(obj);
  }

  /**
     * Adds a list of new Fork objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addFork(Collection coFork)
  {
    if (coFork == null)
      return false;
    java.util.Iterator it = coFork.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objFork.addAll(coFork);
  }

  /**
     * Removes an existing Fork object at the specified index.
     * @return    The removed object.
     */
  public Fork removeFork(int index)
  {
    return (Fork)_objFork.remove(index);
  }

  /**
     * Removes the specified Fork object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeFork(Fork obj)
  {
    return _objFork.remove(obj);
  }

  /**
     * Clears all Fork objects from the list.
     */
  public void clearForkList()
  {
    _objFork.clear();
  }

  /**
     * Returns an array of Join objects. The length of the returned
     * array is zero if the list of Join object is empty.
     */
  public Join[] getJoin()
  {
    return (Join[])_objJoin.toArray(new Join[0]);
  }

  /**
     * Replaces all existing Join objects with a new array of
     * Join objects.
     * @param objArray    an array of Join objects.
     */
  public void setJoin(Join[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objJoin.clear();
    else
    {
      this._objJoin = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Join object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Join getJoin(int index)
  {
    return (Join)_objJoin.get(index);
  }

  /**
     * Replaces an existing Join object at the specified index with
     * a new Join object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setJoin(int index, Join obj)
  {
    if (obj == null)
      removeJoin(index);
    else
    {
      _objJoin.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Join objects in the list.
     */
  public int getJoinCount()
  {
    return _objJoin.size();
  }

  /**
     * Returns <code>true</code> if there is no Join object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoJoin()
  {
    return _objJoin.size() == 0;
  }

  /**
     * Returns a read-only list of Join objects.
     */
  public List getJoinList()
  {
    return Collections.unmodifiableList(_objJoin);
  }

  /**
     * Adds a new Join object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addJoin(Join obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objJoin.add(obj);
  }

  /**
     * Adds a list of new Join objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addJoin(Collection coJoin)
  {
    if (coJoin == null)
      return false;
    java.util.Iterator it = coJoin.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objJoin.addAll(coJoin);
  }

  /**
     * Removes an existing Join object at the specified index.
     * @return    The removed object.
     */
  public Join removeJoin(int index)
  {
    return (Join)_objJoin.remove(index);
  }

  /**
     * Removes the specified Join object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeJoin(Join obj)
  {
    return _objJoin.remove(obj);
  }

  /**
     * Clears all Join objects from the list.
     */
  public void clearJoinList()
  {
    _objJoin.clear();
  }

  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);

    /** adds _objInitiatingRole */
    if (_objInitiatingRole != null)
      children.add(_objInitiatingRole);

    /** adds _objRespondingRole */
    if (_objRespondingRole != null)
      children.add(_objRespondingRole);

    /** adds _objDocumentation1 */
    if (_objDocumentation1 != null && _objDocumentation1.size() > 0)
      children.add(_objDocumentation1);

    /** adds _objStart */
    if (_objStart != null && _objStart.size() > 0)
      children.add(_objStart);

    /** adds _objTransition */
    if (_objTransition != null && _objTransition.size() > 0)
      children.add(_objTransition);

    /** adds _objSuccess */
    if (_objSuccess != null && _objSuccess.size() > 0)
      children.add(_objSuccess);

    /** adds _objFailure */
    if (_objFailure != null && _objFailure.size() > 0)
      children.add(_objFailure);

    /** adds _objBusinessTransactionActivity */
    if (_objBusinessTransactionActivity != null && 
        _objBusinessTransactionActivity.size() > 0)
      children.add(_objBusinessTransactionActivity);

    /** adds _objCollaborationActivity */
    if (_objCollaborationActivity != null && 
        _objCollaborationActivity.size() > 0)
      children.add(_objCollaborationActivity);

    /** adds _objFork */
    if (_objFork != null && _objFork.size() > 0)
      children.add(_objFork);

    /** adds _objJoin */
    if (_objJoin != null && _objJoin.size() > 0)
      children.add(_objJoin);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME! 
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    java.util.Vector all = new java.util.Vector(8);
    //Create 8 empty lists
    for (int i = 0; i < 8; i++)
    {
      GWFDeployableList list = new GWFDeployableList();
      all.add(list);
    }
    //Populate the lists
    ((GWFDeployableList)all.get(0)).addAll(java.util.Arrays.asList(this.getCollaborationActivity()));
    ((GWFDeployableList)all.get(1)).addAll(java.util.Arrays.asList(this.getFailure()));
    ((GWFDeployableList)all.get(2)).addAll(java.util.Arrays.asList(this.getBusinessTransactionActivity()));
    ((GWFDeployableList)all.get(3)).addAll(java.util.Arrays.asList(this.getFork()));
    ((GWFDeployableList)all.get(4)).addAll(java.util.Arrays.asList(this.getJoin()));
    ((GWFDeployableList)all.get(5)).addAll(java.util.Arrays.asList(this.getStart()));
    ((GWFDeployableList)all.get(6)).addAll(java.util.Arrays.asList(this.getSuccess()));
    ((GWFDeployableList)all.get(7)).addAll(java.util.Arrays.asList(this.getTransition()));
    //Deploy attributes to database
    BpssBinaryCollaboration bpssBinColl = new BpssBinaryCollaboration();
    bpssBinColl.setBeginsWhen(this.getBeginsWhen());
    bpssBinColl.setBinaryCollaborationName(this.getName());
    bpssBinColl.setEndsWhen(this.getEndsWhen());
    bpssBinColl.setPostCondition(this.getPostCondition());
    bpssBinColl.setPreCondition(this.getPreCondition());
    bpssBinColl.setPattern(this.getPattern());
    bpssBinColl.setTimeToPerform(this.getTimeToPerform());
    //calculate maximum concurrency value
    int mc = 0;
    if (this.getStartCount() == 1)
    {
      mc = 1;
      mc = Utilities.calcMaxConcurrency(mc, this.getTransition(), 
                                        this.getFork(), this.getJoin());
    }
    bpssBinColl.setMaxConcurrency(new Integer(mc));
    //Deploy only those lists that are not empty
    int finalResult = 0;
    for (int i = 0; i < 8; i++)
    {
      if ((GWFDeployableList)all.get(i) != null)
      {
        GWFDeployableList data = (GWFDeployableList)all.get(i);
        int result = data.deploy(specUId, incomplete);
        finalResult = Utilities.combineResult(finalResult, result);
      }
    }
    try
    {
      AbstractEntityHandler handler = EntityHandlerFactory.getHandlerFor(
                                          BpssBinaryCollaboration.ENTITY_NAME, 
                                          true);
      bpssBinColl = (BpssBinaryCollaboration)handler.createEntity(bpssBinColl);
      BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
      bpssProcSpecEntry.setSpecUId(specUId);
      bpssProcSpecEntry.setEntryName(bpssBinColl.getBinaryCollaborationName());
      bpssProcSpecEntry.setEntryType(bpssBinColl.getEntityName());
      bpssProcSpecEntry.setEntryUId(bpssBinColl.getUId());
      handler = EntityHandlerFactory.getHandlerFor(
                    BpssProcessSpecEntry.ENTITY_NAME, true);
      
      bpssProcSpecEntry = (BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry);
      for (int i = 0; i < 8; i++)
      {
        if ((GWFDeployableList)all.get(i) != null)
        {
          GWFDeployableList data = (GWFDeployableList)all.get(i);
          data.setParentEntryUId(specUId, bpssProcSpecEntry.getUId());
        }
      }
    }
    catch (Throwable th)
    {
      //TODO handle  RemoteException, ParseException
      System.out.println("Unable to deploy " + bpssBinColl.getEntityName());
      th.printStackTrace();
      throw new GWFException();
    }
    return finalResult;
  }

  /**
   * DOCUMENT ME!
   * 
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
    try
    {
      Utilities.setParentEntryUId(specUId, parentEntryUId, this.getName(), 
                                  BpssBinaryCollaboration.ENTITY_NAME);
    }
    catch (GWFException ex)
    {
      ex.printStackTrace();
      throw new GWFException();
    }
  }
  
  public BinaryCollaboration buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;
  
    
      /** Unmarshals "beginsWhen" attribute */
  	  super.setAttributeValue(beginsWhen, elem.getAttribute("beginsWhen"));

      /** Unmarshals "endsWhen" attribute */
  	  super.setAttributeValue(endsWhen, elem.getAttribute("endsWhen"));

      /** Unmarshals "name" attribute */
  	  super.setAttributeValue(name, elem.getAttribute("name"));

      /** Unmarshals "postCondition" attribute */
  	  super.setAttributeValue(postCondition, elem.getAttribute("postCondition"));

      /** Unmarshals "pattern" attribute */
  	  super.setAttributeValue(pattern, elem.getAttribute("pattern"));

      /** Unmarshals "nameID" attribute */
  	  super.setAttributeValue(nameID, elem.getAttribute("nameID"));
      

      /** Unmarshals "preCondition" attribute */
  	  super.setAttributeValue(preCondition, elem.getAttribute("preCondition"));


      /** Unmarshals "timeToPerform" attribute */
  	  super.setAttributeValue(timeToPerform, elem.getAttribute("timeToPerform"));
    

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                                    (GNElement)it1.next()));
    }
    
    /** Unmarshals an element back to a InitiatingRole object */
    InitiatingRole initRole = new InitiatingRole();
    setInitiatingRole(initRole.buildModel(elem.getChild(
                                                                            InitiatingRole._tagName)));

    /** Unmarshals an element back to a RespondingRole object */
    RespondingRole res = new RespondingRole();
    setRespondingRole(res.buildModel(elem.getChild(
                                                                            RespondingRole._tagName)));

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it2 = elem.getChildren(Documentation._tagName).iterator();
    while (it2.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation1(doc.buildModel(
                                                     (GNElement)it2.next()));
    }
    /** Unmarshals a list of "<<_tagName_>>" elements back to Start objects. */
    Iterator it3 = elem.getChildren(Start._tagName).iterator();
    while (it3.hasNext())
    {
    	Start s = new Start();
      addStart(s.buildModel(
                                            (GNElement)it3.next()));
    }
    
    /** Unmarshals a list of "<<_tagName_>>" elements back to Transition objects. */
    Iterator it4 = elem.getChildren(Transition._tagName).iterator();
    while (it4.hasNext())
    {
    	Transition ts = new Transition();
      addTransition(ts.buildModel(
                                                 (GNElement)it4.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Success objects. */
    Iterator it5 = elem.getChildren(Success._tagName).iterator();
    while (it5.hasNext())
    {
    	Success s = new Success();
      addSuccess(s.buildModel(
                                              (GNElement)it5.next()));
    }
    
    /** Unmarshals a list of "<<_tagName_>>" elements back to Failure objects. */
    Iterator it6 = elem.getChildren(Failure._tagName).iterator();
    while (it6.hasNext())
    {
    	Failure f = new Failure();
      addFailure(f.buildModel(
                                              (GNElement)it6.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to BusinessTransactionActivity objects. */
    Iterator it7 = elem.getChildren(BusinessTransactionActivity._tagName).iterator();
    while (it7.hasNext())
    {
    	BusinessTransactionActivity bzTrans = new BusinessTransactionActivity();
      addBusinessTransactionActivity(bzTrans.buildModel(
                                                                  (GNElement)it7.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to CollaborationActivity objects. */
    Iterator it8 = elem.getChildren(CollaborationActivity._tagName).iterator();
    while (it8.hasNext())
    {
    	CollaborationActivity ca = new CollaborationActivity();
      addCollaborationActivity(ca.buildModel(
                                                            (GNElement)it8.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Fork objects. */
    Iterator it9 = elem.getChildren(Fork._tagName).iterator();
    while (it9.hasNext())
    {
    	Fork f = new Fork();
      addFork(f.buildModel(
                                           (GNElement)it9.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to Join objects. */
    Iterator it10 = elem.getChildren(Join._tagName).iterator();
    while (it10.hasNext())
    {
    	Join j = new Join();
      addJoin(j.buildModel(
                                           (GNElement)it10.next()));
    }
    return this;
  }
  
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());

    /** Marshals "beginsWhen" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, beginsWhen);

    /** Marshals "endsWhen" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, endsWhen);

    /** Marshals "name" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, name);

    /** Marshals "postCondition" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, postCondition);

    /** Marshals "pattern" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, pattern);

    /** Marshals "nameID" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, nameID);

    /** Marshals "preCondition" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, preCondition);

    /** Marshals "timeToPerform" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, timeToPerform);

    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a InitiatingRole object to an element */
    if (_objInitiatingRole != null)
      elem.addElement(_objInitiatingRole.buildElement());

    /** Marshals a RespondingRole object to an element */
    if (_objRespondingRole != null)
      elem.addElement(_objRespondingRole.buildElement());

    /** Marshals a list of Documentation objects to elements */
    Iterator it2 = _objDocumentation1.iterator();
    while (it2.hasNext())
    {
      Documentation obj = (Documentation)it2.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Start objects to elements */
    Iterator it3 = _objStart.iterator();
    while (it3.hasNext())
    {
      Start obj = (Start)it3.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Transition objects to elements */
    Iterator it4 = _objTransition.iterator();
    while (it4.hasNext())
    {
      Transition obj = (Transition)it4.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Success objects to elements */
    Iterator it5 = _objSuccess.iterator();
    while (it5.hasNext())
    {
      Success obj = (Success)it5.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Failure objects to elements */
    Iterator it6 = _objFailure.iterator();
    while (it6.hasNext())
    {
      Failure obj = (Failure)it6.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of BusinessTransactionActivity objects to elements */
    Iterator it7 = _objBusinessTransactionActivity.iterator();
    while (it7.hasNext())
    {
      BusinessTransactionActivity obj = (BusinessTransactionActivity)it7.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of CollaborationActivity objects to elements */
    Iterator it8 = _objCollaborationActivity.iterator();
    while (it8.hasNext())
    {
      CollaborationActivity obj = (CollaborationActivity)it8.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Fork objects to elements */
    Iterator it9 = _objFork.iterator();
    while (it9.hasNext())
    {
      Fork obj = (Fork)it9.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of Join objects to elements */
    Iterator it10 = _objJoin.iterator();
    while (it10.hasNext())
    {
      Join obj = (Join)it10.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
  
}
