// %1023962282004:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File:
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Nov 11 2005    Neo Sok Lay         Change to use entityHandler.createEntity
 *                                    to ensure created entity has the correct populated UID
 * Dec 08 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.GWFDeployableList;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssResBusinessActivity;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The RespondingBusinessActivity class represents the element "RespondingBusinessActivity" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT RespondingBusinessActivity (Documentation*,DocumentEnvelope*)&gt;<br>
 */
public class RespondingBusinessActivity
  extends AbstractBpssModel
  implements IGWFDeployable
{

  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 4178389622790714948L;

	/** xml tag name of this element. */
  public static String _tagName = "RespondingBusinessActivity";
  
  /** Defines a isAuthorizationRequired attribute */
  public GNAttribute isAuthorizationRequired = GNXMLDocumentUtility.newAttribute("isAuthorizationRequired", "");
  
  /** Defines a isNonRepudiationRequired attribute */
  public GNAttribute isNonRepudiationRequired = GNXMLDocumentUtility.newAttribute("isNonRepudiationRequired", "");
  
  /** Defines a name attribute */
  public GNAttribute name = GNXMLDocumentUtility.newAttribute("name", "");
  
  /** Defines a isNonRepudiationReceiptRequired attribute */
  public GNAttribute isNonRepudiationReceiptRequired = GNXMLDocumentUtility.newAttribute("isNonRepudiationReceiptRequired", "");
  
  /** Defines a isIntelligibleCheckRequired attribute */
  public GNAttribute isIntelligibleCheckRequired = GNXMLDocumentUtility.newAttribute("isIntelligibleCheckRequired", "");
  
  /** Defines a nameID attribute */
  public GNAttribute nameID = GNXMLDocumentUtility.newAttribute("nameID", "");
  
  /** Defines a timeToAcknowledgeReceipt attribute */
  public GNAttribute timeToAcknowledgeReceipt = GNXMLDocumentUtility.newAttribute("timeToAcknowledgeReceipt", "");
  
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /** Defines a list of DocumentEnvelope objects. */
  protected ArrayList _objDocumentEnvelope = new ArrayList();

  /**
     * Creates an empty RespondingBusinessActivity object
     */
  public RespondingBusinessActivity()
  {
    super();
  }

  /**
     * Gets the value of "isAuthorizationRequired" attribute.
     */
  public String getIsAuthorizationRequired()
  {
    return isAuthorizationRequired.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsAuthorizationRequired(String value_)
  {
    isAuthorizationRequired.setValue(value_);
  }

  /**
     * Gets the value of "isNonRepudiationRequired" attribute.
     */
  public String getIsNonRepudiationRequired()
  {
    return isNonRepudiationRequired.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsNonRepudiationRequired(String value_)
  {
    isNonRepudiationRequired.setValue(value_);
  }

  /**
     * Gets the value of "name" attribute.
     */
  public String getName()
  {
    return name.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setName(String value_)
  {
    name.setValue(value_);
  }

  /**
     * Gets the value of "isNonRepudiationReceiptRequired" attribute.
     */
  public String getIsNonRepudiationReceiptRequired()
  {
    return isNonRepudiationReceiptRequired.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsNonRepudiationReceiptRequired(String value_)
  {
    isNonRepudiationReceiptRequired.setValue(value_);
  }

  /**
     * Gets the value of "isIntelligibleCheckRequired" attribute.
     */
  public String getIsIntelligibleCheckRequired()
  {
    return isIntelligibleCheckRequired.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsIntelligibleCheckRequired(String value_)
  {
    isIntelligibleCheckRequired.setValue(value_);
  }

  /**
     * Gets the value of "nameID" attribute.
     */
  public String getNameID()
  {
    return nameID.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setNameID(String value_)
  {
    nameID.setValue(value_);
  }

  /**
     * Gets the value of "timeToAcknowledgeReceipt" attribute.
     */
  public String getTimeToAcknowledgeReceipt()
  {
    return timeToAcknowledgeReceipt.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setTimeToAcknowledgeReceipt(String value_)
  {
    timeToAcknowledgeReceipt.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }

  /**
     * Returns an array of DocumentEnvelope objects. The length of the returned
     * array is zero if the list of DocumentEnvelope object is empty.
     */
  public DocumentEnvelope[] getDocumentEnvelope()
  {
    return (DocumentEnvelope[])_objDocumentEnvelope.toArray(
                 new DocumentEnvelope[0]);
  }

  /**
     * Replaces all existing DocumentEnvelope objects with a new array of
     * DocumentEnvelope objects.
     * @param objArray    an array of DocumentEnvelope objects.
     */
  public void setDocumentEnvelope(DocumentEnvelope[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentEnvelope.clear();
    else
    {
      this._objDocumentEnvelope = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the DocumentEnvelope object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public DocumentEnvelope getDocumentEnvelope(int index)
  {
    return (DocumentEnvelope)_objDocumentEnvelope.get(index);
  }

  /**
     * Replaces an existing DocumentEnvelope object at the specified index with
     * a new DocumentEnvelope object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentEnvelope(int index, DocumentEnvelope obj)
  {
    if (obj == null)
      removeDocumentEnvelope(index);
    else
    {
      _objDocumentEnvelope.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of DocumentEnvelope objects in the list.
     */
  public int getDocumentEnvelopeCount()
  {
    return _objDocumentEnvelope.size();
  }

  /**
     * Returns <code>true</code> if there is no DocumentEnvelope object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentEnvelope()
  {
    return _objDocumentEnvelope.size() == 0;
  }

  /**
     * Returns a read-only list of DocumentEnvelope objects.
     */
  public List getDocumentEnvelopeList()
  {
    return Collections.unmodifiableList(_objDocumentEnvelope);
  }

  /**
     * Adds a new DocumentEnvelope object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentEnvelope(DocumentEnvelope obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentEnvelope.add(obj);
  }

  /**
     * Adds a list of new DocumentEnvelope objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentEnvelope(Collection coDocumentEnvelope)
  {
    if (coDocumentEnvelope == null)
      return false;
    java.util.Iterator it = coDocumentEnvelope.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentEnvelope.addAll(coDocumentEnvelope);
  }

  /**
     * Removes an existing DocumentEnvelope object at the specified index.
     * @return    The removed object.
     */
  public DocumentEnvelope removeDocumentEnvelope(int index)
  {
    return (DocumentEnvelope)_objDocumentEnvelope.remove(index);
  }

  /**
     * Removes the specified DocumentEnvelope object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentEnvelope(DocumentEnvelope obj)
  {
    return _objDocumentEnvelope.remove(obj);
  }

  /**
     * Clears all DocumentEnvelope objects from the list.
     */
  public void clearDocumentEnvelopeList()
  {
    _objDocumentEnvelope.clear();
  }

  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);

    /** adds _objDocumentEnvelope */
    if (_objDocumentEnvelope != null && _objDocumentEnvelope.size() > 0)
      children.add(_objDocumentEnvelope);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   */
  public void deploy()
  {
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    java.util.Vector all = new java.util.Vector(1);
    for (int i = 0; i < 2; i++)
    {
      GWFDeployableList list = new GWFDeployableList();
      all.add(list);
    }
    //Populate the lists
    ((GWFDeployableList)all.get(0)).addAll(java.util.Arrays.asList(this.getDocumentEnvelope()));
    ((GWFDeployableList)all.get(1)).addAll(java.util.Arrays.asList(this.getDocumentation()));


    //Deploy only those lists that are not empty
    int finalResult = 0;
    for (int i = 0; i < 2; i++)
    {
      if ((GWFDeployableList)all.get(i) != null)
      {
        GWFDeployableList data = (GWFDeployableList)all.get(i);
        int result = data.deploy(specUId, incomplete);
        finalResult = Utilities.combineResult(finalResult, result);
      }
    }


    BpssResBusinessActivity bpssResBizAct = new BpssResBusinessActivity();
    bpssResBizAct.setBusinessActionName(this.getName());
    bpssResBizAct.setIsAuthReq(new Boolean(
                                   this.getIsAuthorizationRequired().equals(
                                       "true") ? true : false));
    bpssResBizAct.setIsIntelligibleChkReq(new Boolean(
                                              this.getIsIntelligibleCheckRequired()
        .equals("true") ? true : false));
    bpssResBizAct.setIsNonRepudiationOfReceiptReq(new Boolean(
                                                      this.getIsNonRepudiationReceiptRequired()
        .equals("true") ? true : false));
    bpssResBizAct.setIsNonRepudiationReq(new Boolean(
                                             this.getIsNonRepudiationRequired()
        .equals("true") ? true : false));
    bpssResBizAct.setTimeToAckReceipt(this.getTimeToAcknowledgeReceipt());
    try
    {
      AbstractEntityHandler handler = EntityHandlerFactory.getHandlerFor(
                                          BpssResBusinessActivity.ENTITY_NAME,
                                          true);
      bpssResBizAct = (BpssResBusinessActivity)handler.createEntity(
                          bpssResBizAct);
      BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
      bpssProcSpecEntry.setSpecUId(specUId);
      bpssProcSpecEntry.setEntryName(bpssResBizAct.getBusinessActionName());
      bpssProcSpecEntry.setEntryType(bpssResBizAct.getEntityName());
      bpssProcSpecEntry.setEntryUId(bpssResBizAct.getUId());
      handler = EntityHandlerFactory.getHandlerFor(
                    BpssProcessSpecEntry.ENTITY_NAME, true);
      //handler.create(bpssProcSpecEntry);
      bpssProcSpecEntry = (BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry); //NSL20051111

      for (int i = 0; i < 2; i++)
      {
        if ((GWFDeployableList)all.get(i) != null)
        {
          GWFDeployableList data = (GWFDeployableList)all.get(i);
          data.setParentEntryUId(specUId, bpssProcSpecEntry.getUId());
        }
      }
    }
    catch (Throwable th)
    {
      //TODO handle RemoteException, ParseException
      System.out.println("Unable to deploy " + bpssResBizAct.getEntityName());
      th.printStackTrace();
      throw new GWFException();
    }
    return finalResult;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
    try
    {
      Utilities.setParentEntryUId(specUId, parentEntryUId, this.getName(),
                                  BpssResBusinessActivity.ENTITY_NAME);
    }
    catch (GWFException ex)
    {
      ex.printStackTrace();
      throw new GWFException();
    }
  }
  
  /**
   * Unmarshals the specified "RespondingBusinessActivity" element back to a RespondingBusinessActivity object.
   */
  public RespondingBusinessActivity buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;


      /** Unmarshals "isAuthorizationRequired" attribute */
  		super.setAttributeValue(isAuthorizationRequired, elem.getAttribute("isAuthorizationRequired"));
      
      /** Unmarshals "isNonRepudiationRequired" attribute */
  		super.setAttributeValue(isNonRepudiationRequired, elem.getAttribute("isNonRepudiationRequired"));
      
      /** Unmarshals "name" attribute */
  		super.setAttributeValue(name, elem.getAttribute("name"));
      

      /** Unmarshals "isNonRepudiationReceiptRequired" attribute */
  		super.setAttributeValue(isNonRepudiationReceiptRequired, elem.getAttribute("isNonRepudiationReceiptRequired"));
  		
      
      /** Unmarshals "isIntelligibleCheckRequired" attribute */
  		super.setAttributeValue(isIntelligibleCheckRequired, elem.getAttribute("isIntelligibleCheckRequired"));
      
      /** Unmarshals "nameID" attribute */
  		super.setAttributeValue(nameID, elem.getAttribute("nameID"));
      
      /** Unmarshals "timeToAcknowledgeReceipt" attribute */
  		super.setAttributeValue(timeToAcknowledgeReceipt, elem.getAttribute("timeToAcknowledgeReceipt"));
      

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                                           (GNElement)it1.next()));
    }

    /** Unmarshals a list of "<<_tagName_>>" elements back to DocumentEnvelope objects. */
    Iterator it2 = elem.getChildren(DocumentEnvelope._tagName).iterator();
    while (it2.hasNext())
    {
    	DocumentEnvelope docEnv = new DocumentEnvelope();
      addDocumentEnvelope(docEnv.buildModel(
                                                              (GNElement)it2.next()));
    }
    return this;
  }
  
  /**
   * Marshals this object to an element.
   */
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());

    /** Marshals "isAuthorizationRequired" attribute */
  	addAttributeToElement(elem, "", isAuthorizationRequired);

    /** Marshals "isNonRepudiationRequired" attribute */
  	addAttributeToElement(elem, "", isNonRepudiationRequired);

    /** Marshals "name" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, name);

    /** Marshals "isNonRepudiationReceiptRequired" attribute */
  	addAttributeToElement(elem, "", isNonRepudiationReceiptRequired);

    /** Marshals "isIntelligibleCheckRequired" attribute */
  	addAttributeToElement(elem, "", isIntelligibleCheckRequired);

    /** Marshals "nameID" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, nameID);

    /** Marshals "timeToAcknowledgeReceipt" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, timeToAcknowledgeReceipt);

    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }

    /** Marshals a list of DocumentEnvelope objects to elements */
    Iterator it2 = _objDocumentEnvelope.iterator();
    while (it2.hasNext())
    {
      DocumentEnvelope obj = (DocumentEnvelope)it2.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
}
