// %1023962279676:com.gridnode.pdip.app.deployment.bpss%
/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File:
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jun 10 2002   Mathew	        Created
 * Jun 13 2002   Mathew         Repackaged
 * Nov 11 2005    Neo Sok Lay         Change to use entityHandler.createEntity
 *                                    to ensure created entity has the correct populated UID
 * Dec 07 2005   Tam Wei Xiang  i)   To remove the depedency on borland xml API.
 *                                   Use GN XML api instead.
 *                              ii)  Change method marshal(), unmarshal(element) to
 *                                   buildElement() and buildModel(element).
 *                              iii) We will use the getParent and setParent method
 *                                   in AbstractBpssModel instead of using XMLObject._getParent
 *                                   and _setParent
 *                              iv)  method validate(boolean) has been removed.     
 */



/**
 * This file is generated by BorlandXML.
 */
package com.gridnode.pdip.app.deploy.manager.bpss;

import java.util.*;

import com.gridnode.pdip.app.deploy.manager.GWFDeployableList;
import com.gridnode.pdip.app.deploy.manager.IGWFDeployable;
import com.gridnode.pdip.app.deploy.manager.util.Utilities;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssBusinessTransActivity;
import com.gridnode.pdip.base.gwfbase.bpss.model.BpssProcessSpecEntry;
import com.gridnode.pdip.framework.db.AbstractEntityHandler;
import com.gridnode.pdip.framework.db.EntityHandlerFactory;
import com.gridnode.pdip.framework.exceptions.domain.GWFException;
import com.gridnode.xml.adapters.GNAttribute;
import com.gridnode.xml.adapters.GNElement;
import com.gridnode.xml.adapters.GNXMLDocumentUtility;

/**
 * The BusinessTransactionActivity class represents the element "BusinessTransactionActivity" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT BusinessTransactionActivity (Documentation)*&gt;<br>
 */
public class BusinessTransactionActivity
  extends AbstractBpssModel
  implements IGWFDeployable
{
  /**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = -8281703293939042641L;

	public long UId;

  /** xml tag name of this element. */
  public static String _tagName = "BusinessTransactionActivity";
  
  /** Defines a name attribute */
  public GNAttribute name = GNXMLDocumentUtility.newAttribute("name", "");
  
  /** Defines a businessTransaction attribute */
  public GNAttribute businessTransaction = GNXMLDocumentUtility.newAttribute("businessTransaction", "");
  
  /** Defines a timeToPerform attribute */
  public GNAttribute timeToPerform = GNXMLDocumentUtility.newAttribute("timeToPerform", "");
  
  /** Defines a fromAuthorizedRole attribute */
  public GNAttribute fromAuthorizedRole = GNXMLDocumentUtility.newAttribute("fromAuthorizedRole", "");
  
  /** Defines a fromAuthorizedRoleIDRef attribute */
  public GNAttribute fromAuthorizedRoleIDRef = GNXMLDocumentUtility.newAttribute("fromAuthorizedRoleIDRef", "");
  
  /** Defines a toAuthorizedRoleIDRef attribute */
  public GNAttribute toAuthorizedRoleIDRef = GNXMLDocumentUtility.newAttribute("toAuthorizedRoleIDRef", "");
  
  /** Defines a isConcurrent attribute */
  public GNAttribute isConcurrent = GNXMLDocumentUtility.newAttribute("isConcurrent", "");
  
  /** Defines a businessTransactionIDRef attribute */
  public GNAttribute businessTransactionIDRef = GNXMLDocumentUtility.newAttribute("businessTransactionIDRef", "");
  
  /** Defines a isLegallyBinding attribute */
  public GNAttribute isLegallyBinding = GNXMLDocumentUtility.newAttribute("isLegallyBinding", "");
  
  /** Defines a nameID attribute */
  public GNAttribute nameID = GNXMLDocumentUtility.newAttribute("nameID", "");
  
  /** Defines a toAuthorizedRole attribute */
  public GNAttribute toAuthorizedRole = GNXMLDocumentUtility.newAttribute("toAuthorizedRole", "");
  
  
  /** Defines a list of Documentation objects. */
  protected ArrayList _objDocumentation = new ArrayList();

  /**
     * Creates an empty BusinessTransactionActivity object
     */
  public BusinessTransactionActivity()
  {
    super();
  }

  /**
     * Gets the value of "name" attribute.
     */
  public String getName()
  {
    return name.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setName(String value_)
  {
    name.setValue(value_);
  }

  /**
     * Gets the value of "businessTransaction" attribute.
     */
  public String getBusinessTransaction()
  {
    return businessTransaction.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessTransaction(String value_)
  {
    businessTransaction.setValue(value_);
  }

  /**
     * Gets the value of "timeToPerform" attribute.
     */
  public String getTimeToPerform()
  {
    return timeToPerform.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setTimeToPerform(String value_)
  {
    timeToPerform.setValue(value_);
  }

  /**
     * Gets the value of "fromAuthorizedRole" attribute.
     */
  public String getFromAuthorizedRole()
  {
    return fromAuthorizedRole.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setFromAuthorizedRole(String value_)
  {
    fromAuthorizedRole.setValue(value_);
  }

  /**
     * Gets the value of "fromAuthorizedRoleIDRef" attribute.
     */
  public String getFromAuthorizedRoleIDRef()
  {
    return fromAuthorizedRoleIDRef.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setFromAuthorizedRoleIDRef(String value_)
  {
    fromAuthorizedRoleIDRef.setValue(value_);
  }

  /**
     * Gets the value of "toAuthorizedRoleIDRef" attribute.
     */
  public String getToAuthorizedRoleIDRef()
  {
    return toAuthorizedRoleIDRef.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setToAuthorizedRoleIDRef(String value_)
  {
    toAuthorizedRoleIDRef.setValue(value_);
  }

  /**
     * Gets the value of "isConcurrent" attribute.
     */
  public String getIsConcurrent()
  {
    return isConcurrent.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsConcurrent(String value_)
  {
    isConcurrent.setValue(value_);
  }

  /**
     * Gets the value of "businessTransactionIDRef" attribute.
     */
  public String getBusinessTransactionIDRef()
  {
    return businessTransactionIDRef.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setBusinessTransactionIDRef(String value_)
  {
    businessTransactionIDRef.setValue(value_);
  }

  /**
     * Gets the value of "isLegallyBinding" attribute.
     */
  public String getIsLegallyBinding()
  {
    return isLegallyBinding.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setIsLegallyBinding(String value_)
  {
    isLegallyBinding.setValue(value_);
  }

  /**
     * Gets the value of "nameID" attribute.
     */
  public String getNameID()
  {
    return nameID.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setNameID(String value_)
  {
    nameID.setValue(value_);
  }

  /**
     * Gets the value of "toAuthorizedRole" attribute.
     */
  public String getToAuthorizedRole()
  {
    return toAuthorizedRole.getValue();
  }

  /**
     * Replaces the existing attribute value with a new value.
     * @param value    New value.
     */
  public void setToAuthorizedRole(String value_)
  {
    toAuthorizedRole.setValue(value_);
  }

  /**
     * Returns an array of Documentation objects. The length of the returned
     * array is zero if the list of Documentation object is empty.
     */
  public Documentation[] getDocumentation()
  {
    return (Documentation[])_objDocumentation.toArray(new Documentation[0]);
  }

  /**
     * Replaces all existing Documentation objects with a new array of
     * Documentation objects.
     * @param objArray    an array of Documentation objects.
     */
  public void setDocumentation(Documentation[] objArray)
  {
    if (objArray == null || objArray.length == 0)
      this._objDocumentation.clear();
    else
    {
      this._objDocumentation = new ArrayList(Arrays.asList(objArray));
      for (int i = 0; i < objArray.length; i++)
      {
        if (objArray[i] != null)
          objArray[i].setParent(this);
      }
    }
  }

  /**
     * Gets the Documentation object at the specified index.
     * @param index    index of the returned object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public Documentation getDocumentation(int index)
  {
    return (Documentation)_objDocumentation.get(index);
  }

  /**
     * Replaces an existing Documentation object at the specified index with
     * a new Documentation object.
     * @param index    index of replaced object.
     * @throws IndexOutOfBoundsException    if index is out of range.
     */
  public void setDocumentation(int index, Documentation obj)
  {
    if (obj == null)
      removeDocumentation(index);
    else
    {
      _objDocumentation.set(index, obj);
      obj.setParent(this);
    }
  }

  /**
     * Returns the number of Documentation objects in the list.
     */
  public int getDocumentationCount()
  {
    return _objDocumentation.size();
  }

  /**
     * Returns <code>true</code> if there is no Documentation object in the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean isNoDocumentation()
  {
    return _objDocumentation.size() == 0;
  }

  /**
     * Returns a read-only list of Documentation objects.
     */
  public List getDocumentationList()
  {
    return Collections.unmodifiableList(_objDocumentation);
  }

  /**
     * Adds a new Documentation object at the end of the list.
     * @return <code>true</code> if the new object is added to the list; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean addDocumentation(Documentation obj)
  {
    if (obj == null)
      return false;
    obj.setParent(this);
    return _objDocumentation.add(obj);
  }

  /**
     * Adds a list of new Documentation objects at the end of the list.
     * @return <code>true</code> if the list was changed; otherwise, the method
     * returns <code>false</code>.
     */
  public boolean addDocumentation(Collection coDocumentation)
  {
    if (coDocumentation == null)
      return false;
    java.util.Iterator it = coDocumentation.iterator();
    while (it.hasNext())
    {
      Object obj = it.next();
      if (obj != null && obj instanceof AbstractBpssModel)
        ((AbstractBpssModel)obj).setParent(this);
    }
    return _objDocumentation.addAll(coDocumentation);
  }

  /**
     * Removes an existing Documentation object at the specified index.
     * @return    The removed object.
     */
  public Documentation removeDocumentation(int index)
  {
    return (Documentation)_objDocumentation.remove(index);
  }

  /**
     * Removes the specified Documentation object.
     * @return <code>true</code> if this list contains the object; otherwise,
     * the method returns <code>false</code>.
     */
  public boolean removeDocumentation(Documentation obj)
  {
    return _objDocumentation.remove(obj);
  }

  /**
     * Clears all Documentation objects from the list.
     */
  public void clearDocumentationList()
  {
    _objDocumentation.clear();
  }

  /**
     * Returns a list containing all child elements. Each element in the list is a subclass
     * of XmlObject.
     */
  public java.util.List _getChildren()
  {
    java.util.List children = new java.util.ArrayList();

    /** adds _objDocumentation */
    if (_objDocumentation != null && _objDocumentation.size() > 0)
      children.add(_objDocumentation);
    return children;
  }

  /**
     * Gets the tag name of this element.
     */
  public String get_TagName()
  {
    return _tagName;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param incomplete DOCUMENT ME!
   * @return DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public int deploy(long specUId, Hashtable incomplete)
             throws GWFException
  {
    GWFDeployableList list = new GWFDeployableList();
    int finalResult = 0;
    if (this.getDocumentationCount() > 0)
    {
      list.addAll(Arrays.asList(this.getDocumentation()));
      finalResult = Utilities.combineResult(GWF_SUCCESS_DIV,
                                            list.deploy(specUId, incomplete));
    }
    //Deploy attributes to database

    /**
     * TODO: fromAuthorizedRole, fromAuthorizedRoleIDRef, toAuthorizedRole,
     * toAuthorizedRoleIDRef
     */
    BpssBusinessTransActivity bpssBizTransAct = new BpssBusinessTransActivity();
    bpssBizTransAct.setActivityName(this.getName());
    bpssBizTransAct.setIsConcurrent(new Boolean(this.getIsConcurrent()));
    bpssBizTransAct.setIsLegallyBinding(new Boolean(this.getIsLegallyBinding()));
    bpssBizTransAct.setTimeToPerform(this.getTimeToPerform());
    bpssBizTransAct.setBusinessTransUId(new Long(0));
    bpssBizTransAct.setFromAuthorizedRole(this.getFromAuthorizedRole());
    bpssBizTransAct.setToAuthorizedRole(this.getToAuthorizedRole());
    //incomplete.put(this, bpssBizTransAct);
    try
    {
      AbstractEntityHandler handler = EntityHandlerFactory.getHandlerFor(
                                          BpssBusinessTransActivity.ENTITY_NAME,
                                          true);
      bpssBizTransAct = (BpssBusinessTransActivity)handler.createEntity(
                            bpssBizTransAct);
      incomplete.put(this, bpssBizTransAct); //NSL20051111 Put the one with UID
      
      BpssProcessSpecEntry bpssProcSpecEntry = new BpssProcessSpecEntry();
      bpssProcSpecEntry.setSpecUId(specUId);
      bpssProcSpecEntry.setEntryName(bpssBizTransAct.getActivityName());
      bpssProcSpecEntry.setEntryType(bpssBizTransAct.getEntityName());
      bpssProcSpecEntry.setEntryUId(bpssBizTransAct.getUId());
      handler = EntityHandlerFactory.getHandlerFor(
                    BpssProcessSpecEntry.ENTITY_NAME, true);
      //handler.create(bpssProcSpecEntry);
      bpssProcSpecEntry = (BpssProcessSpecEntry)handler.createEntity(bpssProcSpecEntry); //NSL20051111

      if (this.getDocumentationCount() > 0)
        list.setParentEntryUId(specUId, bpssProcSpecEntry.getUId());
    }
    catch (Throwable th)
    {
      //TODO handle RemoteException, ParseException
      System.out.println("Unable to deploy " + bpssBizTransAct.getEntityName());
      th.printStackTrace();
      throw new GWFException();
    }
    return finalResult;
  }

  /**
   * DOCUMENT ME!
   *
   * @param specUId DOCUMENT ME!
   * @param parentEntryUId DOCUMENT ME!
   * @throws GWFException DOCUMENT ME!
   */
  public void setParentEntryUId(long specUId, long parentEntryUId)
                         throws GWFException
  {
    try
    {
      Utilities.setParentEntryUId(specUId, parentEntryUId, this.getName(),
                                  BpssBusinessTransActivity.ENTITY_NAME);
    }
    catch (GWFException ex)
    {
      ex.printStackTrace();
      throw new GWFException();
    }
  }
  
  /**
   * Unmarshals the specified "BusinessTransactionActivity" element back to a BusinessTransactionActivity object.
   */
  public BusinessTransactionActivity buildModel(GNElement elem)
  {
  	if (elem == null)
      return null;


      /** Unmarshals "name" attribute */
  		super.setAttributeValue(name, elem.getAttribute("name"));

      /** Unmarshals "businessTransaction" attribute */
  		super.setAttributeValue(businessTransaction, elem.getAttribute("businessTransaction"));

      /** Unmarshals "timeToPerform" attribute */
  		super.setAttributeValue(timeToPerform, elem.getAttribute("timeToPerform"));
      
      /** Unmarshals "fromAuthorizedRole" attribute */
  		super.setAttributeValue(fromAuthorizedRole, elem.getAttribute("fromAuthorizedRole"));
      
      /** Unmarshals "fromAuthorizedRoleIDRef" attribute */
  		super.setAttributeValue(fromAuthorizedRoleIDRef, elem.getAttribute("fromAuthorizedRoleIDRef"));
      
      /** Unmarshals "toAuthorizedRoleIDRef" attribute */
  		super.setAttributeValue(toAuthorizedRoleIDRef, elem.getAttribute("toAuthorizedRoleIDRef"));
      
      /** Unmarshals "isConcurrent" attribute */
  		super.setAttributeValue(isConcurrent, elem.getAttribute("isConcurrent"));

      /** Unmarshals "businessTransactionIDRef" attribute */
  		super.setAttributeValue(businessTransactionIDRef, elem.getAttribute("businessTransactionIDRef"));

      /** Unmarshals "isLegallyBinding" attribute */
  		super.setAttributeValue(isLegallyBinding, elem.getAttribute("isLegallyBinding"));

      /** Unmarshals "nameID" attribute */
  		super.setAttributeValue(nameID, elem.getAttribute("nameID"));

      /** Unmarshals "toAuthorizedRole" attribute */
  		super.setAttributeValue(toAuthorizedRole, elem.getAttribute("toAuthorizedRole"));

    /** Unmarshals a list of "<<_tagName_>>" elements back to Documentation objects. */
    Iterator it1 = elem.getChildren(Documentation._tagName).iterator();
    while (it1.hasNext())
    {
    	Documentation doc = new Documentation();
      addDocumentation(doc.buildModel(
                                                            (GNElement)it1.next()));
    }
    return this;
  }
  
  /**
   * Marshals this object to an element.
   */
  public GNElement buildElement()
  {
  	GNElement elem = GNXMLDocumentUtility.newElement(get_TagName());

    /** Marshals "name" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, name);

    /** Marshals "businessTransaction" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, businessTransaction);

    /** Marshals "timeToPerform" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, timeToPerform);

    /** Marshals "fromAuthorizedRole" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, fromAuthorizedRole);

    /** Marshals "fromAuthorizedRoleIDRef" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, fromAuthorizedRoleIDRef);

    /** Marshals "toAuthorizedRoleIDRef" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, toAuthorizedRoleIDRef);

    /** Marshals "isConcurrent" attribute */
  	addAttributeToElement(elem, "", isConcurrent);

    /** Marshals "businessTransactionIDRef" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, businessTransactionIDRef);

    /** Marshals "isLegallyBinding" attribute */
  	addAttributeToElement(elem, "", isLegallyBinding);

    /** Marshals "nameID" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_IMPLIED, nameID);

    /** Marshals "toAuthorizedRole" attribute */
  	addAttributeToElement(elem, this._ATTR_DEFAULT_REQUIRED, toAuthorizedRole);

    /** Marshals a list of Documentation objects to elements */
    Iterator it1 = _objDocumentation.iterator();
    while (it1.hasNext())
    {
      Documentation obj = (Documentation)it1.next();
      if (obj != null)
        elem.addElement(obj.buildElement());
    }
    return elem;
  }
}
