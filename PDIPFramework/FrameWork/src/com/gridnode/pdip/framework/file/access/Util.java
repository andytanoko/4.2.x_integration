/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2002 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: Util.java
 *
 ****************************************************************************
 * Date           Author                  Changes
 ****************************************************************************
 * Jul 30 2002    Jagadeesh           Modify all reference of ConfigManager to
 *                                    use new ConfigurationManager.Restructur
 *                                    the Configuration Constants to IFrameworkConfig.
 * Mar 12 2007    Neo Sok Lay             Generate unique filename using UUID.                                   
 */


 /* Generated by Together */


package com.gridnode.pdip.framework.file.access;

import java.io.*;
import java.util.*;

import com.gridnode.pdip.framework.config.*;
import com.gridnode.pdip.framework.file.helpers.Logger;
import com.gridnode.pdip.framework.util.UUIDUtil;

import org.apache.util.*;
import org.apache.webdav.lib.*;

public class Util {
  public static boolean isLocal() {
    String isLocal="false";
    try {

        Configuration configManager = ConfigurationManager.getInstance().getConfig(
                                        IFrameworkConfig.FRAMEWORK_WEBDAV_CONFIG);
//      ConfigManager configManager=ConfigManager.getInstance(
//        "file"+File.separatorChar+"webdav.properties");
      isLocal = new String(configManager.getString("webdav.isLocal"));
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return isLocal.equalsIgnoreCase("true");
  }

  public static File initLocalResource(String domain) {
    try {

        Configuration config = ConfigurationManager.getInstance().getConfig(
                                 IFrameworkConfig.FRAMEWORK_WEBDAV_CONFIG);
//      ConfigManager configManager=ConfigManager.getInstance(
//        "file"+File.separatorChar+"webdav.properties");
      File file = new File(config.getString("webdav.localdir."+domain));
      return file;
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return null;
  }

  public static WebdavResource initWebdavResource(String domain) {
    try {

       Configuration config = ConfigurationManager.getInstance().getConfig(
                                IFrameworkConfig.FRAMEWORK_WEBDAV_CONFIG);

//      ConfigManager configManager=ConfigManager.getInstance(
//        "file"+File.separatorChar+"webdav.properties");
      HttpURL httpURL = new HttpURL(config.getString("webdav.server."+domain));
      String userName = new String(config.getString("webdav.user"));
      String userPassword = new String(config.getString("webdav.password"));
      httpURL.setUserInfo(userName,userPassword);
      WebdavResource webdavRes = new WebdavResource(httpURL);
      webdavRes.setDebug(Integer.parseInt(config.getString("webdav.debuglevel")));
      return webdavRes;
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return null;
  }

  public static String createHigherLevelFolders(WebdavResource webdavRes, String newPath) {
    Logger.debug("[Util.createHigherLevelFolders] webdavRes.getPath() = " + webdavRes.getPath());
    Logger.debug("[Util.createHigherLevelFolders] newPath = " + newPath);

    StringTokenizer strTok=new StringTokenizer(newPath,"/");
    int count=strTok.countTokens();
    for (int i=0; i<count-1; i++) {
      try {
        String path=webdavRes.getPath();
        if (path.substring(path.length()-1).equals("/"))
          webdavRes.setPath(path + strTok.nextToken());
        else
          webdavRes.setPath(path + "/" + strTok.nextToken());
        if(!webdavRes.exists())
          if (!webdavRes.mkcolMethod())
            return path;
          else
            Logger.debug("[Util.createHigherLevelFolders] Created directory: " + webdavRes.getPath());
      }
      catch (Exception ex) {
        ex.printStackTrace();
      }
    }
    return webdavRes.getPath();
  }

  public static String createHigherLevelFolders(String rootPath, String newPath)
  {
    Logger.debug("[Util.createHigherLevelFolders] rootPath = " + rootPath);
    Logger.debug("[Util.createHigherLevelFolders] newPath = " + newPath);

    StringTokenizer strTok = new StringTokenizer(newPath, "/\\");
    int count = strTok.countTokens();
    String path = rootPath; // 20020820 DDJ: Moved out of the for loop
    File file = null;
    try
    {
      file = new File(path);
      file.mkdirs();
      for(int i = 0; i < count - 1; i++)
      {
        if(!(path.endsWith("/") || path.endsWith("\\")))
          path += "/";
        path += strTok.nextToken();
        file = new File(path);
        if(!file.exists())
          if (!file.mkdir())
            return path;
          else
            Logger.log("[Util.createHigherLevelFolders] Created directory: " + path);
      }
    }
    catch (Exception ex)
    {
      Logger.log("[Util.createHigherLevelFolders] Failed to create directory: " + path);
      ex.printStackTrace();
    }
    return file.getPath();
  }

  public static File createCache() {
    File file=null;
    try {

       Configuration config = ConfigurationManager.getInstance().getConfig(
                                IFrameworkConfig.FRAMEWORK_WEBDAV_CONFIG);
//      ConfigManager configManager=ConfigManager.getInstance(
//        "file"+File.separatorChar+"webdav.properties");
      String path = config.getString("webdav.cachepath");
      System.out.println("!!!Cache path : " + path);
      String fileName = Util.generateUniqueFileName();
      do {
        System.out.println("!!!Cache file : " + path + fileName + ".dat");
        file = new File(path + fileName + ".dat");
      } while (file.exists());

      file = File.createTempFile(fileName, ".dat", new File(path));
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return file;
  }

  public static boolean write(WebdavResource webdavRes, byte[] in) {
    try {
      File cache = Util.createCache();
      FileOutputStream fOut = new FileOutputStream(cache);
      fOut.write(in);
      fOut.close();
      return webdavRes.putMethod(cache);
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return false;
  }

  public static String generateUniqueFileName() {
    //Random random = new Random();
    //return String.valueOf(random.nextInt())+String.valueOf(random.nextInt());
    //NSL20070312 Ensure uniqueness
    return UUIDUtil.getRandomUUIDInStr();
  }

  public static int getStartFilePath(WebdavResource webdavRes, String[] paths, long offset) {
    long total = 0;
    int i = -1;
    try {
      while (total <= offset) {
        i++;
        webdavRes.setPath(webdavRes.getPath()+paths[i]);
        WebdavFile webdavFile = new WebdavFile(webdavRes);
        total += webdavFile.length();
        System.out.println("!!!Total = "+total);
      }
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return i;
  }

  public static long getStartFileOffset(WebdavResource webdavRes, String[] paths, long offset) {
    long total = 0;
    long fileStart = 0;
    int i = 0;
    try {
      while (total <= offset) {
        fileStart = total;
        webdavRes.setPath(webdavRes.getPath()+paths[i]);
        total += webdavRes.getGetContentLength();
        i++;
      }
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return offset-fileStart;
  }

  public static long putFile(WebdavResource webdavRes, String domain, String path, File file) {
    String initialPath = webdavRes.getPath();
    String resultPath = Util.createHigherLevelFolders(webdavRes, path);
    int fileIndex = path.lastIndexOf("/");
    try {
      if (fileIndex > 0) {
        if (resultPath.equals(initialPath+path.substring(0,fileIndex))) {
          webdavRes.setPath(resultPath+path.substring(fileIndex));
        }
      } else {
        webdavRes.setPath(webdavRes.getPath()+path);
      }
      if (webdavRes.putMethod(file)) {
        file.delete();
        file = null;
        return webdavRes.getGetContentLength();
      }

    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return -1;
  }
  public static int getStartFileIndex(String rootPath, String[] paths, long offset) {

    long total = 0;

    int i = -1;

    try {

      while (total <= offset) {

        i++;

        File file = new File(rootPath+paths[i]);

        total += file.length();

      }

    }

    catch (Exception ex) {

      ex.printStackTrace();

    }

    return i;

  }



  public static long getStartFileOffset(String rootPath, String[] paths, long offset) {

    long total = 0;

    long fileStart = 0;

    int i = 0;

    try {

      while (total <= offset) {

        fileStart = total;

        File file = new File(rootPath+paths[i]);

        total += file.length();

        i++;

      }

    }

    catch (Exception ex) {

      ex.printStackTrace();

    }

    return offset-fileStart;

  }



}