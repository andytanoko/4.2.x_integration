/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: IDataFilter.java
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Mar 28 2001    Neo Sok Lay         Created
 * Oct 15 2003    Neo Sok Lay         Allow setting order fields specifying
 *                                    the ascending or descending.
 * Oct 21 2005    Neo Sok Lay         Allow setting of fields to return, and
 *                                    whether to return distinct result set.                                   
 */
package com.gridnode.pdip.framework.db.filter;

import java.util.Collection;

/**
 * This interface defines the basic functionality of a data filter for
 * filtering criteria.<P>
 *
 * A data filter is organized in a chain:<BR>
 * <PRE><CODE>     filter0 [conn0 filter1 [conn1 filter2 ...] ]</CODE></PRE><P>
 * Each data filter can be a filter tree, e.g.:<BR>
 * <PRE><CODE>                   filter0<BR>
 *         leftFilter conn rightFilter</CODE></PRE><BR>
 * where <CODE>leftFilter</CODE> and <CODE>rightFilter</CODE> are data filters.
 *
 * @author Neo Sok Lay
 *
 * @version GT 2.2 I3
 * @since 1.0a build 0.9.9.6
 */
public interface IDataFilter
{
  /**
   * Add a "range" criteria type filter next to this filter.
   *
   * @param connector The connector operation from this filter to <I>filter</I>
   * @param field The field involved in the criteria
   * @param lowValue The low value of the criteria
   * @param highValue The high value of the criteria
   * @param negate Whether to negate the criteria
   *
   * @since 1.0a build 0.9.9.6
   */
  void addRangeFilter(
    FilterConnector connector, Object field, Object lowValue, Object highValue,
    boolean negate);

  /**
   * Add a "single" criteria type filter next to this filter.
   *
   * @param connector The connector operation from this filter to <I>filter</I>
   * @param field The field involved in the criteria
   * @param op The operator involved in the criteria
   * @param value The value involved in the criteria
   * @param negate Whether to negate the criteria
   *
   * @since 1.0a build 0.9.9.6
   */
  void addSingleFilter(
    FilterConnector connector, Object field, FilterOperator op, Object value,
    boolean negate);

  /**
   * Adds a "domain" criteria type filter next to this filter.
   *
   * @param connector The connector operation from this filter to <I>filter</I>
   * @param field The field involved in the criteria
   * @param values The values in the domain criteria
   * @param negate Whether to negate the criteria.
   *
   * @since 1.0a build 0.9.9.6
   */
  void addDomainFilter(
    FilterConnector connector, Object field, Collection values, boolean negate);

  /**
   * Adds a filter next to this filter.
   *
   * @param connector The connector operation from this filter to <I>filter</I>
   * @param filter The filter to add
   *
   * @since 1.0a build 0.9.9.6
   */
  void addFilter(FilterConnector connector, IDataFilter filter);

  /**
   * Checks whether the criteria should be negated.
   *
   * @return <B>true</B> if the criteria of this filter is to be negated,
   * <B>false</B> otherwise.
   *
   * @since 1.0a build 0.9.9.6
   */
  boolean      hasNegation();

  /**
   * Get the name of this data filter.
   *
   * @return The name of the filter.
   *
   * @since 1.1
   */
  String       getFilterName();

  /**
   * Get the criteria generated by this data filter.
   *
   * @return The string representation of the filter, including the filters
   * on its filter tree (if any) and filters next on the filter chain (if any).
   *
   * @since 1.0a build 0.9.9.6
   */
  String       getFilterExpr();

  /**
   * Get the data filter next to this in the filter chain.
   *
   * @return The filter next to this filter. <B>null</B> if no filter next to
   * this filter.
   *
   * @since 1.0a build 0.9.9.6
   */
  IDataFilter  getNextFilter();

  /**
   * Get the criteria filter of this data filter.
   *
   * @return The simple criteria filter of this filter
   *
   * @since 1.0a build 0.9.9.6
   */
  IValueFilter getValueFilter();

  /**
   * Set the filter next to this filter.
   *
   * @param filter The next filter
   * @param conn The connector operation from this filter to <I>filter</I>
   *
   * @since 1.0a build 0.9.9.6
   */
  void         setNextFilter(IDataFilter filter, FilterConnector conn);

  /**
   * Set the fields to sort by for results. Overwrites any previously
   * set order fields.
   *
   * @param orderFields The fields to sort by, in order of the array index.
   * Default sorting is Ascending.
   *
   * @since 1.0a build 0.9.9.6
   */
  void         setOrderFields(Object[] orderFields);
  
  /**
   * Set the fields to sort by for results. Overwrites any previously
   * set order fields. If any of the arguments is null, the method behaves 
   * in the same way as {@link #setOrderFields(Object[] orderFields)}
   * 
   * @param orderFields The fields to sort by, in order of the array index.
   * @param sortAscending Sort ascending (true) or descending (false) for each
   * specified orderField. 
   * @throws IllegalArgumentException if number of elements specified
   * in orderFields does not match sortAscending (if both are not null).
   * 
   * @since GT 2.2 I3
   */
  void setOrderFields(Object[] orderFields, boolean[] sortAscending);
  
  /**
   * Add a field to sort by for results. This adds on to the order fields  
   * already specified. This field will be appended to the end of the order
   * field sequence.
   * 
   * @param orderField The field to add on to the ordering.
   * @param sortAscending <b>true</b> to sort on ascending order for the
   * specified orderField, <b>false</b> otherwise.
   * 
   * @since GT 2.2 I3
   */
  void addOrderField(Object orderField, boolean sortAscending);
  
  /**
   * Set the fields to select for the results. If not specified, will select all fields.
   * @param selectFields The fields to select for return. <b>null</b> to select all fields.
   * @param distinct <b>true</b> to return distinct rows of results, <b>false</b> otherwise.
   * Default to <b>false</b>
   */
  void setSelectFields(Object[] selectFields, boolean distinct);
  
  /**
   * Get the fields to select for the results. 
   * @return The fields specified to select for the results.
   */
  Object[] getSelectFields();
  
  /**
   * Get whether to return distinct rows for the results.
   * @return <b>true</b> indicates to return distinct rows, <b>false</b> otherwise.
   */
  boolean getDistinct();
  
  /**
   * Get the connector from this data filter to its next data filter.
   *
   * @return The connector operation for this filter to its next filter, if any.
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterConnector   getNextConnector();

  /**
   * Get the fields to sort according to.
   *
   * @return The fields to sort by for results
   *
   * @since 1.0a build 0.9.9.6
   */
  Object[]          getOrderFields();

  /**
   * Get the sorting order corresponding to each order field.
   * 
   * @return Array of <b>true</b> for ascending sorting or <b>false</b>
   * for descending sorting against each orderField.
   * 
   * @since GT 2.2 I3
   */
  boolean[] getSortOrders();
  
  /**
   * Get the filter on the left of the filter tree with this filter as the
   * root.
   *
   * @return The filter on the left side of this filter on a filter tree
   *
   * @since 1.0a build 0.9.9.6
   */
  IDataFilter       getLeftFilter();

  /**
   * Get the filter on the right of the filter tree with this filter as the
   * root.
   *
   * @return The filter on the right side of this filter on a filter tree
   *
   * @since 1.0a build 0.9.9.6
   */
  IDataFilter       getRightFilter();

  /**
   * Get the connector from left filter to right filter.
   *
   * @return The connector operation from left filter to right filter, if any.
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterConnector   getConnector();

  /**
   * Get the connector for "And".
   *
   * @return The operator for "And" connector
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterConnector   getAndConnector();

  /**
   * Get the connector for "Or".
   *
   * @return The operator for "Or" connector
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterConnector   getOrConnector();

  /**
   * Get the operator for "=".
   *
   * @return The operator for "=" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getEqualOperator();

  /**
   * Get the operator for "<>".
   *
   * @return The operator for "<>" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getNotEqualOperator();

  /**
   * Get the operator for ">".
   *
   * @return The operator for ">" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getGreaterOperator();

  /**
   * Get the operator for ">=".
   *
   * @return The operator for ">=" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getGreaterOrEqualOperator();

  /**
   * Get the operator for "<".
   *
   * @return The operator for "<" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getLessOperator();

  /**
   * Get the operator for "<=".
   *
   * @return The operator for "<=" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getLessOrEqualOperator();

  /**
   * Get the operator for "Like".
   *
   * @return The operator for "Like" operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getLikeOperator();

  /**
   * Get the operator for "Locate".
   *
   * @return The operator for "Locate" (string-search) operation
   *
   * @since 1.0a build 0.9.9.6
   */
  FilterOperator    getLocateOperator();
}
