<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:grp="http://www.altova.com/Mapforce/grouping" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="vmf grp xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='NEW'">
				<xsl:value-of select="'N'"/>
			</xsl:when>
			<xsl:when test="$input='UPDATE'">
				<xsl:value-of select="'U'"/>
			</xsl:when>
			<xsl:when test="$input='CANCEL'">
				<xsl:value-of select="'C'"/>
			</xsl:when>
			<xsl:when test="$input='N'">
				<xsl:value-of select="'N'"/>
			</xsl:when>
			<xsl:when test="$input='U'">
				<xsl:value-of select="'U'"/>
			</xsl:when>
			<xsl:when test="$input='C'">
				<xsl:value-of select="'C'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'UNKNOWN'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="REFDOC" select="'THC_REF.xml'"/>
	<xsl:function name="grp:var4_function">
		<xsl:param name="var3_param" as="node()"/>
		<xsl:variable name="var2_resultof_map" as="xs:string*">
			<xsl:for-each select="($var3_param/LineNumber/node())[fn:boolean(self::text())]">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:sequence select="fn:distinct-values($var2_resultof_map)"/>
	</xsl:function>
	<xsl:template match="/">
		<xsl:variable name="var1_PipBShippingOrderRequest" as="node()?" select="Pip3B12ShippingOrderRequest"/>
		<SO>
			<SO_HEADER>
				<S_DUNS_NO>124343547</S_DUNS_NO>
				<S_PIP_ID>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/thisDocumentIdentifier/ProprietaryDocumentIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_PIP_ID>
				<S_PIP_NAME>SO_CONFIRM</S_PIP_NAME>
				<S_PIP_CREATED_DATE>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/thisDocumentGenerationDateTime/DateTimeStamp/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_PIP_CREATED_DATE>
				<S_TRANSMISSION_TYPE>3B12R</S_TRANSMISSION_TYPE>
				<S_REQUEST_TYPE>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/RequestingOrderInformation/isOrderToBeMerged/AffirmationIndicator/node())[fn:boolean(self::text())]">
						<xsl:call-template name="vmf:vmf1_inputtoresult">
							<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
						</xsl:call-template>
					</xsl:for-each>
				</S_REQUEST_TYPE>
				<S_CONTACT_ID>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/fromRole/PartnerRoleDescription/ContactInformation/contactName/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CONTACT_ID>
				<S_CONTACT_EMAIL>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/fromRole/PartnerRoleDescription/ContactInformation/EmailAddress/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CONTACT_EMAIL>
				<S_CONTACT_TEL_NO>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/fromRole/PartnerRoleDescription/ContactInformation/telephoneNumber/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CONTACT_TEL_NO>
				<S_ORDER_NO>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/OrderInformation/orderNumber/ProprietaryDocumentIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_ORDER_NO>
				<S_ORDER_CREATED_DATE>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/OrderInformation/orderDateTime/DateTimeStamp/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_ORDER_CREATED_DATE>
				<S_WAREHOUSE_CODE>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/shipFrom/PartnerDescription/PhysicalLocation/PartnerLocationIdentification/ProprietaryLocationIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_WAREHOUSE_CODE>
				<S_CUST_NO>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/shipTo/PartnerDescription/BusinessDescription/PartnerBusinessIdentification/ProprietaryBusinessIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CUST_NO>
				<S_CUST_SHIP_TO_SITE_NO>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/shipTo/PartnerDescription/BusinessDescription/PartnerBusinessIdentification/ProprietaryDomainIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CUST_SHIP_TO_SITE_NO>
				<S_CUST_SHIP_TO_LOC_CODE>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/shipTo/PartnerDescription/PhysicalLocation/PartnerLocationIdentification/ProprietaryLocationIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CUST_SHIP_TO_LOC_CODE>
				<S_CUST_PO_NO>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/RequestingOrderInformation/DocumentReference/ProprietaryDocumentIdentifier/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_CUST_PO_NO>
				<S_REMARK>
					<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/Instructions/notes/FreeFormText/node())[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</S_REMARK>
				<xsl:for-each-group select="$var1_PipBShippingOrderRequest/ShippingOrder/ShipmentLineItem" group-by="grp:var4_function(.)">
					<xsl:variable name="var5_resultof_group_items" as="item()+" select="current-group()"/>
					<SO_DETAIL_ROW>
						<S_ORDER_LINE_NO>
							<xsl:sequence select="current-grouping-key()"/>
						</S_ORDER_LINE_NO>
						<xsl:variable name="var6_resultof_map" as="xs:string*">
							<xsl:for-each select="($var5_resultof_group_items/productDescription/TextualDescription/summary/FreeFormText/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<S_ORDERED_ITEM_NO>
							<xsl:sequence select="fn:distinct-values($var6_resultof_map)"/>
						</S_ORDERED_ITEM_NO>
						<xsl:variable name="var7_resultof_map" as="xs:decimal*">
							<xsl:for-each select="($var5_resultof_group_items/ShippingContainer/ShippingContainerItem/LotReference/requestedLotQuantity/ProductQuantity/node())[fn:boolean(self::text())]">
								<xsl:sequence select="xs:decimal(fn:string(.))"/>
							</xsl:for-each>
						</xsl:variable>
						<S_ORDERED_ITEM_QTY>
							<xsl:sequence select="xs:string(fn:sum($var7_resultof_map))"/>
						</S_ORDERED_ITEM_QTY>
						<xsl:variable name="var8_resultof_map" as="xs:string*">
							<xsl:for-each select="($var5_resultof_group_items/GlobalProductUnitOfMeasureCode/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<UOM>
							<xsl:for-each select="fn:distinct-values($var8_resultof_map)">
								<xsl:variable name="var14_cur" as="xs:string" select="."/>
								<xsl:for-each select="fn:doc($REFDOC)/REF/QTY/UOM">
									<xsl:variable name="var13_cur" as="node()" select="."/>
									<xsl:variable name="var11_resultof_filter" as="node()*">
										<xsl:for-each select="((CMC_UOM/node())[fn:boolean(self::text())])[($var14_cur = fn:string(.))]">
											<xsl:variable name="var9_resultof_map" as="xs:boolean*">
												<xsl:for-each select="$var13_cur/THC_UOM/node()">
													<xsl:sequence select="fn:boolean(self::text())"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var10_resultof_any" as="xs:boolean" select="fn:exists($var9_resultof_map[.])"/>
											<xsl:if test="$var10_resultof_any">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var11_resultof_filter">
										<xsl:variable name="var12_resultof_map" as="xs:string*">
											<xsl:for-each select="($var13_cur/THC_UOM/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var12_resultof_map return xs:string($x), ' '))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</UOM>
						<xsl:variable name="var15_resultof_map" as="xs:string*">
							<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/consolidationNumber/ProprietaryDocumentIdentifier/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<S_DELIVERY_NO>
							<xsl:sequence select="fn:distinct-values($var15_resultof_map)"/>
						</S_DELIVERY_NO>
						<S_REQ_SHIP_DATE>
							<xsl:for-each select="($var1_PipBShippingOrderRequest/ShippingOrder/ShipmentInformation/DateInformation/requestedShipDate/ShipDate/DateStamp/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:substring(fn:string(.), xs:double('1'), xs:double('8'))"/>
							</xsl:for-each>
						</S_REQ_SHIP_DATE>
						<S_CUST_PO_LINE_NO>
							<xsl:for-each select="($var5_resultof_group_items/RequestingOrderLineItemReference/DocumentReference/LineNumber/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</S_CUST_PO_LINE_NO>
						<S_SPECIAL_INSTRUCTIONS>
							<xsl:for-each select="($var5_resultof_group_items/HandlingInformation/specialHandlingText/FreeFormText/node())[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</S_SPECIAL_INSTRUCTIONS>
						<xsl:for-each select="$var5_resultof_group_items/ShippingContainer/ShippingContainerItem">
							<xsl:variable name="var16_LotReference" as="node()*" select="LotReference"/>
							<SO_DETAIL_ROW_BATCH>
								<S_ALLOCATED_BATCH_ID>
									<xsl:for-each select="($var16_LotReference/requestedLot/ProprietaryLotIdentifier/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</S_ALLOCATED_BATCH_ID>
								<S_ALLOCATED_BATCH_QTY>
									<xsl:for-each select="($var16_LotReference/requestedLotQuantity/ProductQuantity/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</S_ALLOCATED_BATCH_QTY>
							</SO_DETAIL_ROW_BATCH>
						</xsl:for-each>
					</SO_DETAIL_ROW>
				</xsl:for-each-group>
			</SO_HEADER>
		</SO>
	</xsl:template>
</xsl:stylesheet>
