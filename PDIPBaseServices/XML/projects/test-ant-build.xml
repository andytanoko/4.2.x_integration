<project name="XML" default="default" basedir=".">
	<!-- =================================================================== -->
	<!-- Set global properties for this build                                -->
	<!-- =================================================================== -->
	<property environment="env"/>
	<property file="./build.properties"/>
	<property name="module.name" value="XML"/>
	<property name="module.dir" value="./.."/>
	<property name="reqlib.dir" value="${project.dir}/reqlib"/>
	<property name="deplib.dir" value="${module.dir}/deplib"/>
	<property name="deploy.dir" value="${module.dir}/deploy"/>
	<property name="ejbroot.dir" value="${deploy.dir}/ejbroot"/>
	<property name="webroot.dir" value="${deploy.dir}/webroot"/>
	<property name="work.dir" value="${module.dir}/work"/>
	<property name="source.dir" value="${module.dir}/src"/>
	<property name="testsource.dir" value="${module.dir}/test"/>
	<property name="web.dir" value="${module.dir}/web"/>
	<property name="class.dir" value="${module.dir}/classes"/>
	<property name="build.dir" value="${work.dir}/build"/>
	<property name="rebuild" value="false"/>
	<!-- =================================================================== -->
	<!-- Set the required classpath                                          -->
	<!-- =================================================================== -->
	<path id="project.classpath">
		<pathelement path="${classpath}"/>
		<pathelement location="${class.dir}"/>
		<pathelement location="${source.dir}"/>
		<fileset dir="${deploy.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${deplib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${reqlib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<!-- includes required libs from other components here -->
		<fileset dir="${framework.reqlib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${ejblib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${ejbclient.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<target name="all" depends="init, deplib.build, junit.copy, compile, package, deploy"/>
	<target name="default" depends="init, deplib.exclude.common, junit.copy, compile, package"/>
	<!-- =================================================================== -->
	<!-- Initialise the build environment                                    -->
	<!-- =================================================================== -->
	<target name="init">
		<!-- Create the time stamp   -->
		<tstamp/>
		<mkdir dir="${class.dir}"/>
                <delete dir="${deplib.dir}"/>
		<mkdir dir="${deplib.dir}"/>
                <delete>
                  <fileset dir="${deploy.dir}" includes="base-xml*.*"/>
                </delete>
        </target>
	<!-- =================================================================== -->
	<!-- Build Dependent Libraries                                           -->
	<!-- =================================================================== -->
	<target name="deplib.exclude.common" description="Build dependent libraries, excluding common ones">
		<antcall target="deplib.build">
			<param name="exclude.common" value="true"/>
		</antcall>
	</target>
	<target name="deplib.build" description="Build all dependent libraries">
		<antcall target="common-deplib"/>
		<antcall target="other-deplib"/>
		<antcall target="deplib.copy"/>
	</target>
	<target name="common-deplib" unless="exclude.common" description="Build common dependent libraries">
		<!-- call all common dependent ant scripts here -->
		<ant antfile="ant-build.xml" target="default" dir="${framework.dir}/projects" inheritAll="false"/>
	</target>
	<target name="other-deplib" description="Build other dependent libraries">
		<!-- call all other dependent ant scripts here -->
		<!--ant antfile="ant-build.xml" target="default" dir="${appservice.user.dir}/projects" inheritAll="false"/-->
	</target>
	<target name="deplib.copy" description="Copy dependent libraries">
		<!--copy todir="${deplib.dir}" preservelastmodified="yes">
			<fileset dir="${appservice.user.dir}/deploy" includes="app-user*.jar,app-user*.war"/>
		</copy-->
		<!-- copy all dependent ant scripts here -->
		<copy todir="${deplib.dir}" preservelastmodified="yes">
			<fileset dir="${framework.dir}/deploy" includes="framework.jar"/>
		</copy>
	</target>
	<target name="junit.copy" description="Copy junit dependent libraries">
		<copy todir="${deplib.dir}" preservelastmodified="yes">
			<fileset dir="${framework.dir}/deploy" includes="junit.war"/>
			<fileset dir="${framework.reqlib.dir}" includes="junit-3.7.jar"/>
		</copy>
	</target>
	<!-- =================================================================== -->
	<!-- Compile only modified source files                                  -->
	<!-- =================================================================== -->
	<target name="compile" description="Compiles only modified source files">
		<javac classpathref="project.classpath" srcdir="${source.dir}" includes="**" destdir="${class.dir}"/>
		<javac classpathref="project.classpath" srcdir="${testsource.dir}" includes="**" destdir="${class.dir}"/>
	</target>
	<!-- =================================================================== -->
	<!-- Packages the application/module for deployment"                     -->
	<!-- =================================================================== -->
	<target name="package">
		<antcall target="package.non-ejb.jars"/>
		<antcall target="package.ejb.jars"/>
	</target>
	<!-- =================================================================== -->
	<!-- Package non ejb classes into the deploy directory (jar preparation) -->
	<!-- =================================================================== -->
	<target name="package.non-ejb.jars">
		<antcall target="package.base.xml"/>
		<!-- insert calls for other non EJBs here -->
	</target>
	<!-- =================================================================== -->
	<!-- Package ejb classes into the deploy directory (jar preparation)     -->
	<!-- =================================================================== -->
	<target name="package.ejb.jars">
		<antcall target="package.base.x-m-l.facade.bean"/>
		<!-- insert calls for other EJBs here -->
	</target>
	<!-- =================================================================== -->
	<!-- Package the non-ejb classes of the application/module               -->
	<!-- =================================================================== -->
	<target name="package.base.xml">
		<antcall target="clean.build.dir"/>
		<copy todir="${build.dir}/classes" preservelastmodified="yes">
			<fileset dir="${class.dir}" includes="**/*.class" excludes="**/*Bean.class,**/*BeanTest.class"/>
		</copy>
		<antcall target="package.non-ejb">
			<param name="jar.name" value="base-xml.jar"/>
		</antcall>
	</target>
	<!-- =================================================================== -->
	<!-- Package the ejb classes of the base/module                   -->
	<!-- =================================================================== -->
	<target name="package.base.x-m-l.facade.bean">
		<antcall target="package.ejb">
			<param name="jar.name" value="base-xml-facade-ejb.jar"/>
			<param name="meta.dir" value="${ejbroot.dir}/META-INF/XMLFacadeTest/"/>
			<param name="source.path" value="${source}/"/>
			<param name="package.path" value="com/gridnode/pdip/xml/ejb/"/>
			<param name="home.class" value="IXMLServiceLocalHome.*"/>
			<param name="proxy.class" value="IXMLServiceLocalObj.*"/>
			<param name="bean.class" value="XMLServiceBean.*"/>
			<param name="depn.class" value="*.*"/>
		</antcall>
	</target>
	<!-- insert calls for packaging other beans here -->
	<!-- =================================================================== -->
	<!-- Package non ejb classes into the deploy directory (jar preparation) -->
	<!-- =================================================================== -->
	<target name="package.non-ejb">
		<condition property="jar.uptodate">
			<and>
				<available file="${deploy.dir}/${jar.name}" type="file"/>
				<uptodate targetfile="${deploy.dir}/${jar.name}">
					<srcfiles dir="${class.dir}">
						<include name="**/*.class"/>
						<exclude name="**/*Bean.class"/>
					</srcfiles>
				</uptodate>
				<equals arg1="${rebuild}" arg2="false"/>
			</and>
		</condition>
		<condition property="all.uptodate">
			<equals arg1="${jar.uptodate}" arg2="true"/>
		</condition>
		<echo message="${jar.name} is uptodate? ${jar.uptodate}"/>
		<antcall target="non-ejb.jar"/>
	</target>
	<!-- =================================================================== -->
	<!-- Jar all non-ejb class files exception the Bean class                -->
	<!-- =================================================================== -->
	<target name="non-ejb.jar" unless="jar.uptodate">
		<!--  Jars all files in the class directory excluding bean classes  -->
		<jar jarfile="${deploy.dir}/${jar.name}">
			<fileset dir="${build.dir}/classes" includes="**/*.class"/>
		</jar>
	</target>
	<!-- =================================================================== -->
	<!-- Package ejb classes into the deploy directory (jar preparation)     -->
	<!-- =================================================================== -->
	<target name="package.ejb">
		<!-- Set the bean.uptodate property to true if all conditions hold true -->
		<condition property="bean.uptodate">
			<and>
				<available file="${deploy.dir}/${jar.name}" type="file"/>
				<uptodate targetfile="${deploy.dir}/${jar.name}">
					<srcfiles dir="${class.dir}/${package.path}" includes="${home.class},${proxy.class},${bean.class},${depn.class}"/>
				</uptodate>
				<uptodate targetfile="${deploy.dir}/${jar.name}">
					<srcfiles dir="${meta.dir}" includes="ejb-jar.xml,${appserver}*.xml,*.MF"/>
				</uptodate>
				<equals arg1="${rebuild}" arg2="false"/>
			</and>
		</condition>
		<condition property="all.uptodate">
			<equals arg1="${bean.uptodate}" arg2="true"/>
		</condition>
		<echo message="${jar.name} is not uptodate "/>
		<antcall target="ejb.jar"/>
	</target>
	<!-- =================================================================== -->
	<!-- Copy all bean related files to build directory and jar them         -->
	<!-- =================================================================== -->
	<target name="ejb.jar" unless="bean.uptodate">
		<!-- Clean up the build directory -->
		<antcall target="clean.build.dir"/>
		<!-- Copy all bean related files to the build directory -->
		<mkdir dir="${build.dir}/${package.path}"/>
		<copy todir="${build.dir}/${package.path}">
			<fileset dir="${class.dir}/${package.path}" includes="${home.class},${proxy.class},${bean.class},${depn.class}"/>
		</copy>
		<copy todir="${build.dir}/META-INF">
			<fileset dir="${meta.dir}">
				<include name="ejb-jar.xml"/>
				<include name="${appserver}*.xml"/>
				<include name="*M*.*"/>
				<exclude name="*.bak"/>
			</fileset>
		</copy>
		<!-- Jars all files in the build directory -->
		<jar jarfile="${deploy.dir}/${jar.name}" basedir="${build.dir}" manifest="${build.dir}/META-INF/MANIFEST.MF"/>
	</target>
	<!-- =================================================================== -->
	<!-- Package the application ear file if the ear.uptodate property is    -->
	<!-- set to false                                                        -->
	<!-- =================================================================== -->
	<target name="package.ejb.ear">
		<condition property="ear.uptodate">
			<and>
				<available file="${deploy.dir}/${ear.name}" type="file"/>
				<uptodate targetfile="${deploy.dir}/${ear.name}">
					<srcfiles dir="${deploy.dir}/META-INF/XMLServiceTest">
						<include name="**/*application.xml"/>
						<exclude name="**/*.bak"/>
					</srcfiles>
				</uptodate>
				<equals arg1="${bean.uptodate}" arg2="true"/>
				<equals arg1="${all.uptodate}" arg2="true"/>
			</and>
		</condition>
		<echo message="(${bean.uptodate},${all.uptodate})
                   ear.uptodate is ${ear.uptodate}"/>
		<antcall target="ejb.ear"/>
	</target>
	<!-- =================================================================== -->
	<!-- Generates the application ear file from the files defined in        -->
	<!-- the fileset                                                         -->
	<!-- =================================================================== -->
	<target name="ejb.ear" unless="ear.uptodate">
		<antcall target="clean.build.dir"/>
		<copy todir="${build.dir}">
			<fileset dir="${deploy.dir}/META-INF/XMLServiceTest/" includes="*.MF,*.xml"/>
			<fileset dir="${deploy.dir}/" includes="base-xml*.jar"/>
			<fileset dir="${deplib.dir}/" includes="*.jar,*.war"/>
			<fileset dir="${base.reqlib.dir}/" includes="jaxen*.jar,
                                                                     jdom.jar,
                                                                     saxon*.jar,
                                                                     xerces*.jar"/>
			<fileset dir="${framework.reqlib.dir}/" includes="log*.jar"/>
		</copy>
		<ear earfile="${deploy.dir}/${ear.name}" basedir="${build.dir}" appxml="${build.dir}/application.xml" includes="*.jar,*.war," manifest="${build.dir}/MANIFEST.MF"/>
		<delete dir="${work.dir}"/>
	</target>
	<!-- =================================================================== -->
	<!-- Package the application war file                                    -->
	<!-- =================================================================== -->
	<target name="package.web.war">
		<!-- not mandatory if war not required -->
	</target>
	<!-- =================================================================== -->
	<!-- Setup Web deployment directory                                      -->
	<!-- =================================================================== -->
	<target name="web.war" unless="war.uptodate"/>
	<!-- =================================================================== -->
	<!-- Deploy the application ear file to the application server           -->
	<!-- deploy directory                                                    -->
	<!-- =================================================================== -->
	<target name="deploy">
		<antcall target="package.web.war"/>
		<antcall target="package.ejb.ear"/>
		<copy file="${deploy.dir}/${ear.name}" tofile="${appserver.deploy.dir}/${ear.name}" overwrite="yes"/>
	</target>
	<!-- =================================================================== -->
	<!-- Create the build directory structure used by compile and copy the   -->
	<!-- deployment descriptors into it                                      -->
	<!-- =================================================================== -->
	<target name="clean.build.dir">
		<delete dir="${work.dir}"/>
		<mkdir dir="${work.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/META-INF"/>
	</target>
</project>
