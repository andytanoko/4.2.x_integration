/**
 * This software is the proprietary information of GridNode Pte Ltd.
 * Use is subjected to license terms.
 *
 * Copyright 2001-2005 (C) GridNode Pte Ltd. All Rights Reserved.
 *
 * File: TxDeliveryTimerBean.java
 *
 ****************************************************************************
 * Date           Author              Changes
 ****************************************************************************
 * Jan 12, 2007   i00107              Created
 */

package com.gridnode.gridtalk.httpbc.ishb.ejb;

import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.ejb.*;

import com.gridnode.gridtalk.httpbc.common.util.ILogTypes;
import com.gridnode.gridtalk.httpbc.ishb.workers.WorkerKickStart;
import com.gridnode.util.log.Logger;
import com.gridnode.util.log.LoggerManager;

/**
 * @author i00107
 * Handles the delivery timers.
 */
public class TxDeliveryTimerBean implements SessionBean, TimedObject
{

  /**
   * Serial Version UID
   */
  private static final long serialVersionUID = -3154041788816863412L;
  private SessionContext _sc;
  private Logger _logger;
  
  /**
   * @see javax.ejb.SessionBean#ejbActivate()
   */
  public void ejbActivate() 
  {
  }

  /**
   * @see javax.ejb.SessionBean#ejbPassivate()
   */
  public void ejbPassivate()
  {
  }

  /**
   * @see javax.ejb.SessionBean#ejbRemove()
   */
  public void ejbRemove()
  {
    _logger = null;
  }

  public void ejbCreate()
  {
    _logger = LoggerManager.getInstance().getLogger(ILogTypes.TYPE_HTTPBC_ISHB, "TxDeliveryTimerBean");
  }
  
  /**
   * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
   */
  public void setSessionContext(SessionContext arg0)
  {
    _sc = arg0;
  }

  /**
   * @see javax.ejb.TimedObject#ejbTimeout(javax.ejb.Timer)
   */
  public void ejbTimeout(Timer timer)
  {
    String type = (String)timer.getInfo();
    _logger.debugMessage("ejbTimeout", null, "Time to deliver for "+type+" transactions");
    WorkerKickStart workerKickSt = new WorkerKickStart(type);
    workerKickSt.perform(new Date());
  }

  /**
   * @see ITxDeliveryTimer#initializeTimer(long, long, String)
   */
  public void initializeTimer(long delay, long interval, String deliveryType)
  {
    String mtdName = "initializeTimer";
    Object[] params = {delay, interval, deliveryType};
    try 
    {
      _sc.getTimerService().createTimer(delay, interval, deliveryType);
      _logger.logMessage(mtdName, params, "Timer created at " +
             new Date() + " with a timeout: " + interval +
             " and with info: " + deliveryType);
    } 
    catch (Exception e) 
    {
      _logger.logError(mtdName, params, "Error creating timer: "+e.getMessage(), e);
    }
  }
  
  /**
   * @see ITxDeliveryTimer#cancelTimers()
   */
  public void cancelTimers()
  {
    try 
    {
      TimerService ts = _sc.getTimerService();
      Collection timers = ts.getTimers();
      Iterator it = timers.iterator();
      while (it.hasNext())
      {
        Timer myTimer = (Timer) it.next();
        myTimer.cancel();
      }
    }
    catch (Exception e) 
    {
      _logger.logError("cancelTimers", null, "Exception cancelling timer: "+
                           e.getMessage(), e);
    }
  }
  
}
