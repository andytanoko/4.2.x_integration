package com.gridnode.helpmaker;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * Title:        Help Maker
 * Description:
 * Copyright:    Copyright (c) 2003
 * Company:      GridNode
 * @author Ferry
 * @version 1.0
 */

public class HelpMakerFrame
    extends JFrame
{
  public static final int LEVEL_MAX = 5;
  public static final int LEVEL_DEFAULT = 3;

  JPanel contentPane;
  JTextField srcFileTF = new JTextField();
  JTextField destFolderTF = new JTextField();
  JTextField cssTF = new JTextField();
  JLabel jLabel1 = new JLabel();
  JLabel jLabel2 = new JLabel();
  JLabel jLabel3 = new JLabel();
  JLabel jLabel4 = new JLabel();
  JTextPane logTP = new JTextPane();
  TitledBorder titledBorder1;
  JFileChooser jfc = new JFileChooser();
  JButton jButton1 = new JButton();
  JButton jButton2 = new JButton();
  JButton jButton3 = new JButton();
  JButton jButton4 = new JButton();
  JButton jButton5 = new JButton();
  Splitter split;
  Timer myTimer;
  GridBagLayout gridBagLayout1 = new GridBagLayout();
  JLabel jLabel5 = new JLabel();
  JTextField titleTF = new JTextField();
  JLabel jLabel6 = new JLabel();
  JTextField shortnameTF = new JTextField();
  JLabel jLabel7 = new JLabel();
  JComboBox levelCB = new JComboBox();

  /**Construct the frame*/
  public HelpMakerFrame()
  {
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try
    {
      jbInit();
      init();
    }
    catch(Exception e)
    {
      e.printStackTrace();
      Logger.write(e.getMessage());
    }
  }

  /**
   * Component initialization
   *
   * @throws Exception
   */
  private void jbInit() throws Exception
  {
    titledBorder1 = new TitledBorder("");
    Logger.setLogger(logTP);
    contentPane = (JPanel)this.getContentPane();
    contentPane.setLayout(gridBagLayout1);
    this.setSize(new Dimension(650, 606));
    this.setTitle("Help Maker");
    jButton1.setText("...");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        selectHtml(e);
      }
    });
    jLabel1.setText("The Source File");
    jLabel2.setText("The Destination Directory");
    jButton2.setText("...");
    jButton2.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        selectDestFolder(e);
      }
    });
    jLabel3.setFont(new java.awt.Font("Dialog", 1, 16));
    jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
    jLabel3.setText("GridNode Help Files Generator");
    logTP.setBorder(BorderFactory.createRaisedBevelBorder());
    logTP.setEditable(false);
    logTP.setFont(new java.awt.Font("SansSerif", 0, 12));
    logTP.setText(
        "This program generates HTML files based on section from an HTML page " +
        "generated by WinWord. The HTML is cleaned up and the images are restructured " +
        "accordingly.");
    jButton3.setText("Generate");
    jButton3.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        Thread t = new Thread(){
          public void run()
          {
            generate();
          }
        };
        t.start();

      }
    });
    jButton4.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        selectCss(e);
      }
    });
    jButton4.setText("...");
    jLabel4.setText("The Stylesheet File");
    jButton5.setEnabled(false);
    jButton5.setText("Finish");
    jButton5.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        exit(0);
      }
    });
    jLabel5.setText("Document Title (e.g. GridTalk User Guide)");
    titleTF.setText("");
    jLabel6.setText("Short name (for folder and naming purpose, 2 ~ 8 char.)");
    shortnameTF.setText("");
    srcFileTF.setEditable(false);
    destFolderTF.setEditable(false);
    cssTF.setEditable(false);
    jLabel7.setText("Level (number of header level to split)");
    levelCB.setSelectedIndex(-1);
    contentPane.add(jLabel1,   new GridBagConstraints(0, 7, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 20, 3, 10), 143, 9));
    contentPane.add(srcFileTF,    new GridBagConstraints(0, 8, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(3, 20, 3, 10), 318, 5));
    contentPane.add(jLabel2,   new GridBagConstraints(0, 9, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 94, 9));
    contentPane.add(destFolderTF,    new GridBagConstraints(0, 10, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(3, 20, 3, 10), 318, 5));
    contentPane.add(jButton1,   new GridBagConstraints(1, 8, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0));
    contentPane.add(jButton2,   new GridBagConstraints(1, 10, -1000, -1000, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0));
    contentPane.add(jLabel4,   new GridBagConstraints(0, 11, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 125, 9));
    contentPane.add(cssTF,    new GridBagConstraints(0, 12, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(3, 20, 3, 10), 318, 5));
    contentPane.add(jButton4,   new GridBagConstraints(1, 12, -1000, -1000, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0));
    contentPane.add(jLabel3,   new GridBagConstraints(0, 0, 3, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(3, 8, 0, 7), 153, 18));
    contentPane.add(logTP,     new GridBagConstraints(0, 13, 3, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(8, 20, 3, 20), -1000, -1000));
    contentPane.add(jButton3,   new GridBagConstraints(1, 14, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(10, 10, 10, 10), 10, 5));
    contentPane.add(jButton5,   new GridBagConstraints(1, 15, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(10, 10, 10, 10), 29, 4));
    contentPane.add(jLabel5,   new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 0, 0));
    contentPane.add(titleTF,    new GridBagConstraints(0, 2, 1, 1, 1.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(3, 20, 3, 10), 0, 0));
    contentPane.add(jLabel6,   new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 0, 0));
    contentPane.add(shortnameTF,   new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 60, 0));
    contentPane.add(jLabel7,     new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(3, 20, 0, 10), 0, 0));
    contentPane.add(levelCB,    new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(3, 20, 3, 10), 40, 0));
    myTimer = new Timer(1000, new ActionListener()
    {
      public void actionPerformed(ActionEvent evt)
      {
        if(split.isFinished())
        {
          jButton5.setEnabled(true);
        }
      }
    });
  }

  /**
   * Overridden so we can exit when window is closed
   *
   * @param e WindowEvent
   */
  protected void processWindowEvent(WindowEvent e)
  {
    super.processWindowEvent(e);
    if(e.getID() == WindowEvent.WINDOW_CLOSING)
    {
      exit(0);
    }
  }

  void selectHtml(ActionEvent e)
  {
    jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
    {
      srcFileTF.setText(jfc.getSelectedFile().getAbsolutePath());
    }
  }

  void selectDestFolder(ActionEvent e)
  {
    jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
    {
      destFolderTF.setText(jfc.getSelectedFile().getAbsolutePath());
    }
  }

  private boolean isEmpty(String text)
  {
    return(text.trim().equals(""));
  }

  void generate()
  {
    if(isEmpty(srcFileTF.getText()) ||
        isEmpty(destFolderTF.getText()) ||
        isEmpty(cssTF.getText()) ||
//        isEmpty(titleTF.getText()) ||
        isEmpty(shortnameTF.getText()) ||
        levelCB.getSelectedIndex() == -1)
    {
      JOptionPane.showMessageDialog(this,
          "All parameters are required! please enter them", "Error",
          JOptionPane.ERROR_MESSAGE);
      return;
    }

    jButton3.setEnabled(false);

    boolean test = true;
    if(test)
    {
      HtmlReader reader = new HtmlReader(
          srcFileTF.getText(),
          destFolderTF.getText(),
          cssTF.getText(),
          titleTF.getText(),
          shortnameTF.getText(),
          ((Integer)levelCB.getSelectedItem()).intValue());

      reader.split();
    }
    else
    {
      split = new Splitter(
          srcFileTF.getText(),
          destFolderTF.getText(),
          cssTF.getText(),
          titleTF.getText(),
          shortnameTF.getText(),
          ((Integer)levelCB.getSelectedItem()).intValue());
      split.start();
      myTimer.start();
    }
  }

  void selectCss(ActionEvent e)
  {
    jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
    {
      cssTF.setText(jfc.getSelectedFile().getAbsolutePath());
    }
  }

  void exit(int status)
  {
    System.exit(status);
  }

  private void init()
  {
    for (int i = 0; i < LEVEL_MAX; i++)
    {
      levelCB.addItem(new Integer(i+1));
    }

    levelCB.setSelectedIndex(LEVEL_DEFAULT-1);
  }
}
