<?xml version="1.0" encoding="UTF-8"?>
<project name="gtas" default="build" basedir=".">
  <!-- comment off this task if you do not have jalopy installed -->
  <!-- comment off doformat in build.properties as well -->
  <!--taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin"/-->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!--  ===================================================================  -->
  <!--  Set global properties for this build                                 -->
  <!--  ===================================================================  -->
  <property environment="env"/>
  <property file="c:/my-build.properties"/>

  <!--  ===================================================================  -->
  <!--  Define the standard build target sets: build, all, default           -->
  <!--  ===================================================================  -->
  <target name="build" depends="init">
    <echo message="[${layer.name}] Executing target:build"/>
    <antcall target="decide.build.all"/>
  </target>

  <target name="all" depends="deplib,reqlib,deploy"/>

  <!--  ===================================================================  -->
  <!--  Initialise the build environment                                     -->
  <!--  ===================================================================  -->
  <target name="init"
          depends="get.properties,
                   define.properties,
                   exist.timestamp,
                   create.timestamp">                  
    <echo message="[${layer.name}] Executing target:init"/>
    <mkdir dir="${class.dir}"/>
    <mkdir dir="${deplib.dir}"/>
  </target>

  <!--  ===================================================================  -->
  <!--  Rebuild if necessary                                                 -->
  <!--  ===================================================================  -->
  <target name="decide.rebuild" if="rebuild">
    <echo message="[${layer.name}] Executing target:decide.rebuild"/>
    <antcall target="rebuild.clean.dir">
      <param name="target.dir" value="${framework.dir}"/>   
      <param name="include.prefix" value="**/"/>
    </antcall>
    <antcall target="rebuild.clean.dir">
      <param name="target.dir" value="${baseservice.dir}"/>
      <param name="include.prefix" value="**/"/>
    </antcall>
    <antcall target="rebuild.clean.dir">
      <param name="target.dir" value="${appservice.dir}"/>
      <param name="include.prefix" value="**/"/>
    </antcall>
    <antcall target="rebuild.clean.dir">
      <param name="target.dir" value="${gtas.dir}"/>
      <param name="include.prefix" value=""/>
    </antcall>
  </target>

  <target name="rebuild.clean.dir">
    <delete includeEmptyDirs="true">
      <fileset dir="${target.dir}">
        <include name="${include.prefix}classes/**"/>
        <include name="${include.prefix}src/*.class"/>
        <include name="${include.prefix}deploy/*.jar"/>
        <include name="${include.prefix}deploy/*.war"/>
        <include name="${include.prefix}deploy/*.ear"/>
        <include name="${include.prefix}deplib/*.jar"/>
        <include name="${include.prefix}deplib/*.war"/>
        <include name="${include.prefix}deplib/*dd.properties"/>
        <include name="${include.prefix}projects/*rebuild.properties"/>
        <include name="dist/**/*.*"/>
      </fileset>
    </delete>
  </target>

  <!--  ===================================================================  -->
  <!--  Set the timestamp info                                               -->
  <!--  ===================================================================  -->
  <target name="create.timestamp" unless="timestamp">
    <tstamp/>
    <property name="timestamp" value="${DSTAMP}-${TSTAMP}"/>
    <echo message="[${layer.name}] Timestamp Created=${timestamp}"/>
  </target>

  <target name="exist.timestamp" if="timestamp">
    <echo message="[${layer.name}] Timestamp Exist=${timestamp}"/>
  </target>


  <!--  ===================================================================  -->
  <!--  decide whether the build.properties file for this module should      -->
  <!--  be used                                                              -->
  <!--  ===================================================================  -->
  <target name="get.properties">
    <property name="global.build.path" value="."/>
    <property file="${global.build.path}/global-build.properties"/>
  </target>

  <!--  ===================================================================  -->
  <!--  define the environment specific properties                           -->
  <!--  ===================================================================  -->
  <target name="define.properties">
    <property name="module.dir" value="./.."/>
    <property name="config.dir" value="${module.dir}/conf"/>
    <property name="data.dir" value="${module.dir}/data"/>
    <property name="reqlib.dir" value="${project.dir}/reqlib"/>
    <property name="deplib.dir" value="${module.dir}/deplib"/>
    <property name="deploy.dir" value="${module.dir}/deploy"/>
    <property name="dist.dir" 
	          value="${module.dir}/dist/${appserver.name}-${appserver.version}"/>
    <property name="ejbroot.dir" value="${deploy.dir}/ejbroot"/>
    <property name="webroot.dir" value="${deploy.dir}/webroot"/>
    <property name="work.dir" value="${module.dir}/work"/>
    <property name="source.dir" value="${module.dir}/src"/>
    <property name="test.dir" value="${module.dir}/test"/>
    <property name="web.dir" value="${module.dir}/web"/>
    <property name="class.dir" value="${module.dir}/classes"/>
    <property name="build.dir" value="${work.dir}/build"/>
    <property name="run.dir" value="${module.dir}/run"/>
    <property file="gtas-build.properties"/>
    <property name="client.dist.dir" 
	          value="${module.dir}/dist/${webserver.name}-${webserver.version}"/>
    <property name="log.libs" value="**/log4j*.jar,**/commons-logging*.jar"/>
    <property name="override.deploy.dir" value="${override.conf.dir}/${module.location}/deploy"/>
  </target>

  <!--  ===================================================================  -->
  <!--  decide which build to perform                                        -->
  <!--  ===================================================================  -->
  <target name="decide.build.all" unless="build.default" depends="ear.dd.header">
    <!-- comment off this property if you want the sub modules to use all -->
    <echo message="[${layer.name}] Executing target:decide.build.all"/>
    <antcall target="decide.rebuild"/>
    <delete dir="${run.dir}" includeEmptyDirs="true"/>
    <mkdir dir="${run.dir}"/>
    <ant antfile="common-ant-build.xml" target="build" dir="." inheritAll="false">
      <property name="global.build.path" value="${basedir}"/>
      <property name="build.default" value="defined"/>
      <property name="top.build.dir" value="${top.build.dir}"/>
      <property name="timestamp" value="${timestamp}"/>
      <property name="application.xml.file" value="${application.xml.file}"/>
      <property name="setup.env" value="${setup.env}"/>
    </ant>
    <antcall target="all"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build dependent libraries                                           -->
  <!-- =================================================================== -->
  <target name="deplib">
    <echo message="[${layer.name}] Executing target:deplib"/>
    <mkdir dir="${deplib.dir}"/>
    <antcall target="deplib.build.1"/>
    <antcall target="deplib.build.2"/>
    <antcall target="deplib.build.3"/>
    <antcall target="deplib.build.4"/>
    <antcall target="deplib.build.5"/>
    <antcall target="deplib.build.6"/>
    <antcall target="deplib.build.7"/>
    <antcall target="deplib.build.8"/>
    <antcall target="deplib.build.9"/>
    <antcall target="deplib.build.10"/>
    <antcall target="deplib.build.11"/>
    <antcall target="deplib.build.12"/>
    <antcall target="deplib.build.13"/>
    <antcall target="deplib.build.14"/>
    <antcall target="deplib.build.15"/>
    <antcall target="deplib.build.16"/>
    <antcall target="deplib.build.17"/>
    <antcall target="deplib.build.18"/>
    <antcall target="deplib.build.19"/>
    <antcall target="deplib.build.20"/>
    <antcall target="deplib.build.21"/>
    <antcall target="deplib.build.22"/>
    <antcall target="deplib.build.23"/>
    <antcall target="deplib.build.24"/>
    <antcall target="deplib.build.25"/>
    <antcall target="deplib.build.26"/>
    <antcall target="deplib.build.27"/>
    <antcall target="deplib.build.28"/>
    <antcall target="deplib.build.29"/>
    <antcall target="deplib.build.30"/>
  </target>

  <!-- =================================================================== -->
  <!-- Iteration targets to build dependent libraries                      -->
  <!-- =================================================================== -->
  <target name="deplib.build.1" if="deplib.module.1">
    <property name="deplib.module" value="${deplib.module.1}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.1}"/>
    <property name="deplib.module.dir" value="${deplib.module.1.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.1.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.2" if="deplib.module.2">
    <property name="deplib.module" value="${deplib.module.2}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.2}"/>
    <property name="deplib.module.dir" value="${deplib.module.2.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.2.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.3" if="deplib.module.3">
    <property name="deplib.module" value="${deplib.module.3}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.3}"/>
    <property name="deplib.module.dir" value="${deplib.module.3.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.3.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.4" if="deplib.module.4">
    <property name="deplib.module" value="${deplib.module.4}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.4}"/>
    <property name="deplib.module.dir" value="${deplib.module.4.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.4.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.5" if="deplib.module.5">
    <property name="deplib.module" value="${deplib.module.5}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.5}"/>
    <property name="deplib.module.dir" value="${deplib.module.5.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.5.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.6" if="deplib.module.6">
    <property name="deplib.module" value="${deplib.module.6}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.6}"/>
    <property name="deplib.module.dir" value="${deplib.module.6.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.6.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.7" if="deplib.module.7">
    <property name="deplib.module" value="${deplib.module.7}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.7}"/>
    <property name="deplib.module.dir" value="${deplib.module.7.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.7.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.8" if="deplib.module.8">
    <property name="deplib.module" value="${deplib.module.8}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.8}"/>
    <property name="deplib.module.dir" value="${deplib.module.8.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.8.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.9" if="deplib.module.9">
    <property name="deplib.module" value="${deplib.module.9}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.9}"/>
    <property name="deplib.module.dir" value="${deplib.module.9.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.9.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

   <target name="deplib.build.10" if="deplib.module.10">
    <property name="deplib.module" value="${deplib.module.10}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.10}"/>
    <property name="deplib.module.dir" value="${deplib.module.10.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.10.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.11" if="deplib.module.11">
    <property name="deplib.module" value="${deplib.module.11}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.11}"/>
    <property name="deplib.module.dir" value="${deplib.module.11.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.11.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.12" if="deplib.module.12">
    <property name="deplib.module" value="${deplib.module.12}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.12}"/>
    <property name="deplib.module.dir" value="${deplib.module.12.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.12.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.13" if="deplib.module.13">
    <property name="deplib.module" value="${deplib.module.13}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.13}"/>
    <property name="deplib.module.dir" value="${deplib.module.13.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.13.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.14" if="deplib.module.14">
    <property name="deplib.module" value="${deplib.module.14}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.14}"/>
    <property name="deplib.module.dir" value="${deplib.module.14.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.14.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.15" if="deplib.module.15">
    <property name="deplib.module" value="${deplib.module.15}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.15}"/>
    <property name="deplib.module.dir" value="${deplib.module.15.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.15.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.16" if="deplib.module.16">
    <property name="deplib.module" value="${deplib.module.16}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.16}"/>
    <property name="deplib.module.dir" value="${deplib.module.16.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.16.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.17" if="deplib.module.17">
    <property name="deplib.module" value="${deplib.module.17}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.17}"/>
    <property name="deplib.module.dir" value="${deplib.module.17.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.17.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.18" if="deplib.module.18">
    <property name="deplib.module" value="${deplib.module.18}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.18}"/>
    <property name="deplib.module.dir" value="${deplib.module.18.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.18.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.19" if="deplib.module.19">
    <property name="deplib.module" value="${deplib.module.19}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.19}"/>
    <property name="deplib.module.dir" value="${deplib.module.19.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.19.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

   <target name="deplib.build.20" if="deplib.module.20">
    <property name="deplib.module" value="${deplib.module.20}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.20}"/>
    <property name="deplib.module.dir" value="${deplib.module.20.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.20.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.21" if="deplib.module.21">
    <property name="deplib.module" value="${deplib.module.21}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.21}"/>
    <property name="deplib.module.dir" value="${deplib.module.21.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.21.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.22" if="deplib.module.22">
    <property name="deplib.module" value="${deplib.module.22}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.22}"/>
    <property name="deplib.module.dir" value="${deplib.module.22.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.22.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.23" if="deplib.module.23">
    <property name="deplib.module" value="${deplib.module.23}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.23}"/>
    <property name="deplib.module.dir" value="${deplib.module.23.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.23.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.24" if="deplib.module.24">
    <property name="deplib.module" value="${deplib.module.24}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.24}"/>
    <property name="deplib.module.dir" value="${deplib.module.24.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.24.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.25" if="deplib.module.25">
    <property name="deplib.module" value="${deplib.module.25}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.25}"/>
    <property name="deplib.module.dir" value="${deplib.module.25.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.25.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.26" if="deplib.module.26">
    <property name="deplib.module" value="${deplib.module.26}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.26}"/>
    <property name="deplib.module.dir" value="${deplib.module.26.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.26.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.27" if="deplib.module.27">
    <property name="deplib.module" value="${deplib.module.27}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.27}"/>
    <property name="deplib.module.dir" value="${deplib.module.27.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.27.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.28" if="deplib.module.28">
    <property name="deplib.module" value="${deplib.module.28}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.28}"/>
    <property name="deplib.module.dir" value="${deplib.module.28.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.28.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.29" if="deplib.module.29">
    <property name="deplib.module" value="${deplib.module.29}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.29}"/>
    <property name="deplib.module.dir" value="${deplib.module.29.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.29.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="deplib.build.30" if="deplib.module.30">
    <property name="deplib.module" value="${deplib.module.30}"/>
    <property name="deplib.module.layer" value="${deplib.module.layer.30}"/>
    <property name="deplib.module.dir" value="${deplib.module.30.dir}"/>
    <property name="deplib.module.properties.file" value="${deplib.module.30.properties.file}"/>
    <antcall target="decide.build.deplib"/>
  </target>

  <target name="decide.build.deplib" depends="check.timestamp">
    <antcall target="deplib.build"/>
  </target>

  <!-- =================================================================== -->
  <!-- Check the timestamp of dependent libraries                          -->
  <!-- =================================================================== -->
  <target name="check.timestamp">
    <property file="${deplib.module.dir}/projects/${deplib.module}-rebuild.properties"/>
    <condition property="no.rebuild">
      <equals arg1="${rebuild.timestamp}" arg2="${timestamp}"/>
    </condition>
    <!--antcall target="deplib.build"/-->
  </target>

  <!-- =================================================================== -->
  <!-- Build dependent libraries                                           -->
  <!-- =================================================================== -->
  <target name="deplib.build" unless="no.rebuild">
    <property name="from.dir" value="${deplib.module.dir}"/>
    <property name="from.jar" value="${deplib.module.layer}-${deplib.module}*.jar,${deplib.module.layer}*.war,${deplib.module.layer}.jar"/>
    <echo message="[${layer.name}] Executing build script for [${deplib.module.layer}-${deplib.module}]"/>
    <ant antfile="module-ant-build.xml" target="build" dir="${from.dir}/projects" inheritAll="false">
      <property name="global.build.path" value="${basedir}"/>
      <property name="build.default" value="defined"/>
      <property name="top.build.dir" value="${top.build.dir}"/>
      <property name="timestamp" value="${timestamp}"/>
      <property name="module.properties" value="${deplib.module.properties.file}"/>
      <property name="application.xml.file" value="${application.xml.file}"/>
      <property name="setup.env" value="${setup.env}"/>
    </ant>
    <condition property="is.top">
      <equals arg1="${top.build.dir}" arg2="${module.dir}"/>
    </condition>
    <!--antcall target="deplib.dd.copy"/-->
  </target>

  <!-- =================================================================== -->
  <!-- Copy a dependent library to the deplib folder                       -->
  <!-- =================================================================== -->
  <target name="deplib.copy" description="Copy dependent libraries">
    <copy todir="${deplib.dir}" preservelastmodified="yes">
      <fileset dir="${from.dir}/deploy" includes="${from.jar}"/>
      <fileset dir="${from.dir}/deplib" includes="*.jar"/>
    </copy>
  </target>

  <!--target name="deplib.dd.copy" unless="is.top">
    <copy todir="${top.build.dir}/deplib" preservelastmodified="yes">
      <fileset dir="${from.dir}/projects" includes="*-dd.properties"/>
    </copy>
  </target-->


  <!--  ===================================================================  -->
  <!--  Packages the application/module for deployment"                      -->
  <!--  ===================================================================  -->
  <target name="package">
    <echo message="[${layer.name}] Executing target:package"/>
    <antcall target="package.non-ejb.jars"/>
    <antcall target="package.ejb.jars"/>
    <property name="war.name.server" value="[${layer.name}].war"/>
    <property name="war.name.client" value="[${layer.name}]-client.war"/>
    <antcall target="package.web"/>
  </target>

  <target name="package.web" depends="create.war.dd">
    <antcall target="package.server.war"/>
    <antcall target="package.client.war"/>
  </target>

  <target name="package.client" if="build.client">
    <ant antfile="presentation-ant-build.xml" target="default" dir="." inheritAll="false" output="presentation-rebuild.properties"/>
    <antcall target="create.application.xml.body.web">
        <param name="web.uri" value="${client.uri}"/>
        <param name="web.context.root" value="${client.context.root}"/>
    </antcall>
    <antcall target="package.onlinehelp"/>
  </target>

  <target name="package.server" depends="ear.dd.footer">
    <antcall target="package.ejb.ear"/>
  </target>

  <target name="package.onlinehelp" if="build.onlinehelp">
    <ant antfile="build.xml" target="default" dir="${gtas.onlinehelp.dir}/projects" inheritAll="false" output="help-rebuild.properties"/>
    <antcall target="create.application.xml.body.web">
        <param name="web.uri" value="${help.uri}"/>
        <param name="web.context.root" value="${help.context.root}"/>
    </antcall>
    <copy todir="${client.dist.dir}" overwrite="yes">
        <fileset dir="${gtas.onlinehelp.dir}/dist"/>
    </copy>
  </target>

   <!-- =================================================================== -->
  <!-- Deploy the application ear file to the application server           -->
  <!-- deploy directory                                                    -->
  <!-- =================================================================== -->
  <target name="deploy" depends="init">
    <echo message="[${layer.name}] Executing target:deploy"/>
    <property name="ear.name" value="${module.name}.ear"/>
    <!--antcall target="create.ear.dd"/-->
    <!-- commented 040729 NSL -->
    <!--antcall target="package.ejb.ear"/-->
    <!--copy file="${dist.dir}/${ear.name}" 
	      tofile="${appserver.deploy.dir}/${ear.name}" overwrite="yes"/>
    <antcall target="setup.env"/-->
    <!-- 040729 NSL -->
    <if>
       <not>
         <equals arg1="${deploy.ear.only}" arg2="true"/>
       </not>
       <then>
	    <antcall target="package.client"/>
	    <antcall target="package.server"/> 
	    <antcall target="setup.env"/>
       </then>
    </if>
    <antcall target="deploy.ear"/>
  </target>

  <target name="deploy.ear" unless="deploy.skip.ear">
    <antcall target="copy.ear"/>
    <antcall target="telnet.deploy"/>
  </target>

  <target name="copy.ear" unless="use.telnet.deploy"
	  description="Deploys the ear file to the J2EE engine using copy">
    <copy file="${dist.dir}/${ear.name}" 
	      tofile="${appserver.deploy.dir}/${ear.name}" overwrite="yes"/>
  </target>
  
  <target name="telnet.deploy" if="use.telnet.deploy"
	  description="Deploys the ear file to the J2EE engine using telnet">
    <echo message="Telnet deployment does not seem to be working... pls deploy manually using Deploy Tool"/>
    <!--	
    <echo message="Starting telnet deployment on ${telnet.server}..."/>
    <telnet userid="${telnet.userid}" password="${telnet.password}" 
				server="${telnet.server}" port="${telnet.port}">
				<read timeout="10">&gt;</read>
				<write>jump ${telnet.appserver.id}</write>
				<read timeout="10">&gt;</read>
				<write>add deploy</write>
				<read timeout="10">&gt;</read>
				<write>deploy ${dist.dir}/${ear.name}</write>
				<read timeout="1200">&gt;</read>
				<write>START_APP gridnode.com/GridTalk Application Server</write>
				<read>&gt;</read>
				<write>quit</write>
	</telnet>
    -->
  </target> 
  

  <!--  ===================================================================  -->
  <!--  Package the application ear file if the ear.uptodate property is     -->
  <!--  set to false                                                         -->
  <!--  ===================================================================  -->
  <target name="package.ejb.ear">
    <echo message="[${layer.name}] Executing target:package.ejb.ear"/>
    <echo message="[${layer.name}] client.dist.dir = ${client.dist.dir}"/>
    <condition property="ear.uptodate">
      <and>
        <available file="${dist.dir}/${ear.name}" type="file"/>
        <uptodate targetfile="${dist.dir}/${ear.name}">
          <srcfiles dir="${deploy.dir}/META-INF/${module.name}" includes="application.xml,${appserver.name}*.xml,*.MF" excludes="*.bak"/>
          <srcfiles dir="${client.dist.dir}">
            <include name="**/*.war"/>
          </srcfiles>
        </uptodate>
				<or>
					<and>
						<equals arg1="${has.specific.dd.ear}" arg2="true"/>
						<uptodate targetfile="${deploy.dir}/${ear.name}">
							<srcfiles dir="${deploy.dir}/META-INF/${module.name}/${appserver.name}-${appserver.version}">
								<include name="*.xml"/>
							</srcfiles>
						</uptodate>

					</and>
					<equals arg1="${has.specific.dd.ear}" arg2="false"/>
					<not>
						<isset property="${has.specific.dd.ear}"/>
					</not>
				</or>
        <equals arg1="${bean.uptodate}" arg2="true"/>
        <equals arg1="${all.uptodate}" arg2="true"/>
      </and>
    </condition>
    <echo message="[${layer.name}] ${ear.name} is uptodate: ${ear.uptodate}"/>
    <antcall target="ejb.ear"/>
  </target>

  <!--  ===================================================================  -->
  <!--  Generates the application ear file from the files defined in         -->
  <!--  the fileset                                                          -->
  <!--  ===================================================================  -->
  <target name="ejb.ear" unless="ear.uptodate">
	    <condition property="has.specific.dd.ear">
         <and>
	      <available file="${deploy.dir}/META-INF/${module.name}/${appserver.name}-${appserver.version}" type="dir"/>
	    </and>
	  </condition>
  
    <antcall target="clean.build.dir"/>
    <copy todir="${build.dir}">
      <fileset dir="${deploy.dir}/META-INF/${module.name}" includes="*.MF,application.xml"/>
      <!--fileset dir="${deploy.dir}" includes="*.jar,*.war"/-->
      <fileset dir="${deploy.dir}" includes="*.jar,*.xml" excludes="*-client-*.jar,*-lite.jar,*-ws-*.jar"/>
      <fileset dir="${deplib.dir}" includes="*.jar,*.war" excludes="*-client.war,*-lite.jar"/>
      <fileset dir="${client.dist.dir}" includes="*.war"/>
    </copy>

	<!-- TWX Override the in sequence application.xml from D:\wxtam\svn\4.2.x_dev\GTAS\GridTalk\deploy\META-INF -->
	<echo message="Overwritting application.xml in build.dir: ${build.dir}" />
	<copy file="${deploy.dir}/META-INF/application.xml" todir="${build.dir}" overwrite="true"/>
	
    <antcall target="copy.specific.dd.ear"/>

    <antcall target="copy.reqlibs"/>
	<mkdir dir="${dist.dir}"/>
    <ear earfile="${dist.dir}/${ear.name}"
         basedir="${build.dir}"
         appxml="${build.dir}/application.xml"
         includes="*.jar,*.war,**/*.xml"
         excludes="**/application.xml"
         manifest="${build.dir}/MANIFEST.MF"/>
    <delete dir="${work.dir}"/>
  </target>

  <target name="copy.reqlibs" if="reqlibs">
    <copy todir="${build.dir}">
      <fileset dir="${reqlib.dir}" includes="${reqlibs}"/>
    </copy>
  </target>

  <target name="copy.specific.dd.ear">
	  <if>
		  <equals arg1="${has.specific.dd.ear}" arg2="true"/>
		  <then>
		        <echo message="build dir: ${build.dir}  fileset dir: ${deploy.dir}/META-INF/${module.name}/${appserver.name}-${appserver.version}"/>
				<copy todir="${build.dir}/META-INF" overwrite="true" preservelastmodified="true">
				  <fileset dir="${deploy.dir}/META-INF/${module.name}/${appserver.name}-${appserver.version}">
					<include name="*.xml"/>
				</fileset>
				</copy>
		  </then>
		  <else>
				<copy todir="${build.dir}/META-INF" overwrite="true" preservelastmodified="true">
				  <fileset dir="${deploy.dir}/META-INF/${module.name}">
					<include name="${appserver.name}*.xml"/>
				  </fileset>
				</copy>
		  </else>
	  </if>
	  
    <if>
      <available file="${override.deploy.dir}" type="dir"/>
      <then>
	    <echo message="Copy to dir: ${build.dir} override deploy dir: ${override.deploy.dir}"/>
        <copy todir="${build.dir}" overwrite="yes">
          <fileset dir="${override.deploy.dir}" includes="*.jar,*.xml" excludes="*-client-*.jar,*-lite.jar"/>
        </copy>
		<!--Override the META-INF dir -->
		<copy todir="${build.dir}/META-INF" overwrite="yes">
          <fileset dir="${override.deploy.dir}/META-INF" includes="*.xml" excludes="*-client-*.jar,*-lite.jar"/>
        </copy>
      </then>
    </if>
  </target>

  <!--  ===================================================================  -->
  <!--  Package the application war file                                     -->
  <!--  ===================================================================  -->
  <target name="package.server.war" if="has.server">
    <echo message="[${layer.name}] Executing target:package.web.war"/>
    <echo message="[${layer.name}] Packaging server war"/>
	    <condition property="has.specific.dd.server.war">
         <and>
	      <available file="${webroot.dir}/server/WEB-INF/${appserver.name}-${appserver.version}" type="dir"/>
	    </and>
	  </condition>
    
    <antcall target="clean.build.dir"/>
    <copy todir="${build.dir}">
      <fileset dir="${webroot.dir}/server" casesensitive="false" includes="WEB-INF/web.xml,WEB-INF/${appserver.name}*.xml"/>
      <fileset dir="${deploy.dir}" includes="${server.war.libs}" excludes="*ejb.jar"/>
      <fileset dir="${deplib.dir}" includes="${server.war.deplibs}" excludes="*ejb.jar"/>
      <fileset dir="${web.dir}/server" includes="**/*.*"/>
      <fileset dir="${reqlib.dir}" includes="${server.war.reqlibs}"/>
    </copy>
		<antcall target="copy.specific.dd.war" inheritAll="false">
			<param name="has.specific.dd.war"  value="${has.specific.dd.server.war}"/>
			<param name="to.webinf.dir" value="${build.dir}/WEB-INF"/>
			<param name="from.webinf.dir" value="${webroot.dir}/server/WEB-INF//${appserver.name}-${appserver.version}"/>
		</antcall>
    
    <war warfile="${deploy.dir}/${war.name.server}" basedir="${build.dir}" webxml="${build.dir}/WEB-INF/web.xml" includes="**/*.*" excludes="${log.libs}"/>
  </target>

  <target name="package.client.war" if="has.client">
    <echo message="[${layer.name}] Packaging client war"/>
	  <condition property="has.specific.dd.client.war">
         <and>
	      <available file="${webroot.dir}/client/WEB-INF/${appserver.name}-${appserver.version}" type="dir"/>
	    </and>
	  </condition>
    
    <antcall target="clean.build.dir"/>
    <copy todir="${build.dir}">
      <fileset dir="${webroot.dir}/client"  casesensitive="false" includes="WEB-INF/web.xml,WEB-INF/${appserver.name}*.xml"/>
      <fileset dir="${deploy.dir}" includes="${client.war.libs}" excludes="*ejb.jar"/>
      <fileset dir="${deplib.dir}" includes="${client.war.deplibs}" excludes="*ejb.jar"/>
      <fileset dir="${web.dir}/client" includes="**/*"/>
      <fileset dir="${reqlib.dir}" includes="${client.war.reqlibs}"/>
    </copy>
	   	<antcall target="copy.specific.dd.war" inheritAll="false">
			<param name="has.specific.dd.war"  value="${has.specific.dd.client.war}"/>
			<param name="to.webinf.dir" value="${build.dir}/WEB-INF"/>
			<param name="from.webinf.dir" value="${webroot.dir}/client/WEB-INF//${appserver.name}-${appserver.version}"/>
	   </antcall>
    
    <war warfile="${deploy.dir}/${war.name.client}" basedir="${build.dir}" webxml="${build.dir}/WEB-INF/web.xml" includes="**/*.*" excludes="${log.libs}"/>
    <!--  not mandatory if war not required  -->
  </target>

	<target name="copy.specific.dd.war">
	  <if>
		  <equals arg1="${has.specific.dd.war}" arg2="true"/>
		  <then>
				<copy todir="${to.webinf.dir}" overwrite="true" preservelastmodified="true">
				  <fileset dir="${from.webinf.dir}" includes="*.xml"/>
				</copy>
		  </then>
	  </if>
    </target>

  <!-- =================================================================== -->
  <!-- Create the build directory structure used by compile and copy the   -->
  <!-- deployment descriptors into it                                      -->
  <!-- =================================================================== -->
  <target name="clean.build.dir">
    <delete dir="${work.dir}"/>
    <mkdir dir="${work.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/META-INF"/>
  </target>

  <!-- =================================================================== -->
  <!-- Perform timestamping                                                -->
  <!-- =================================================================== -->
  <target name="timestamping">
    <echo file="${module.name}-rebuild.properties" message="rebuild.timestamp=${timestamp}"/>
  </target>

  <target name="reqlib">
    <condition property="copy.reqlib">
	  <and>
	    <not>
          <equals arg1="${top.build.dir}" arg2="${module.dir}"/>
	    </not> 
	    <isset property="reqlibs"/>
	  </and>
    </condition>
    <antcall target="reqlib.copy"/>
  </target>

  <target name="reqlib.copy" if="copy.reqlib">
    <copy todir="${top.build.dir}/deplib">
       <fileset dir="${reqlib.dir}" includes="${reqlibs}"/>
    </copy>    
  </target>

  <!-- =================================================================== -->
  <!-- Setting up the deployment environment                                 -->
  <!-- =================================================================== -->
  <target name="prepare.env" if="setup.env">
    <echo message="[${layer.name}] Executing target:prepare.env"/>
    <!--antcall target="sqlscripts.copy"-->
    <!--antcall target="config.copy"-->
    <!--antcall target="data.copy"-->
  </target>

  <!-- =================================================================== -->
  <!-- Setting up the deployment environment                               -->
  <!-- =================================================================== -->
  <target name="setup.env" if="setup.env" depends="init">
    <echo message="[${layer.name}] Executing target:setup.env"/>
    <antcall target="setup.db"/>
    <antcall target="deploy.app.conf"/>
    <antcall target="deploy.app.data"/>
	<antcall target="deploy.appserver.conf"/>
	<antcall target="deploy.webserver.conf"/>
  </target>

  <target name="deploy.app.conf" if="setup.app.conf">
    <echo message="[${layer.name}] Executing target:deploy.app.conf"/>
    <antcall target="config.copy"/>
    <delete dir="${appserver.app.conf.dir}" includeEmptyDirs="true"/>
    <copy todir="${appserver.app.conf.dir}" overwrite="yes">
      <fileset dir="${run.dir}/conf"/>
    </copy>
  </target>

 <target name="config.copy">
    <echo message="[${layer.name}] Executing target:config.copy"/>
    <property name="top.config.dir" value="${top.build.dir}/run/conf/default"/>
    <mkdir dir="${top.config.dir}"/>
    <!-- consolidate all gtas specific properties files at run/conf/default
    < folder first. these shall be moved to run/conf/gtas folder next time -->
    <copy todir="${top.config.dir}" overwrite="yes">
       <fileset dir="${config.dir}/server/default" includes="**/*.*"/>
    </copy>
    <if>
        <available file="${config.dir}/server/${appserver.name}" type="dir"/>
	<then>
    	    <copy todir="${top.config.dir}" overwrite="yes">
	       <fileset dir="${config.dir}/server/${appserver.name}" includes="**/*.*"/>
	    </copy>
	</then>
    </if>
    <if>
        <available file="${config.dir}/server/${appserver.name}-${appserver.version}" type="dir"/>
	<then>
	    <copy todir="${top.config.dir}" overwrite="yes">
	       <fileset dir="${config.dir}/${appserver.name}-${appserver.version}" includes="**/*.*"/>
	    </copy>
	</then>
    </if>
  </target>

  <target name="deploy.app.data" if="setup.app.data">
    <echo message="[${layer.name}] Executing target:deploy.app.data"/>
    <antcall target="data.copy"/>
    <delete dir="${appserver.app.data.dir}/${application.name}" 
	        includeEmptyDirs="true"/>
    <mkdir dir="${appserver.app.data.dir}/${application.name}" />
    <copy todir="${appserver.app.data.dir}/${application.name}" 
	      overwrite="yes" includeEmptyDirs="yes">
      <fileset dir="${run.dir}" includes="data/**"/>
    </copy>
  </target>

 <target name="data.copy">
    <echo message="[${layer.name}] Executing target:data.copy"/>
    <property name="top.data.dir" value="${top.build.dir}/run/data"/>
    <mkdir dir="${top.data.dir}"/>
    <!-- consolidate all gtas specific properties files at run/conf/default
    < folder first. these shall be moved to run/conf/gtas folder next time -->
    <copy todir="${top.data.dir}" includeEmptyDirs="yes">
       <fileset dir="${data.dir}" includes="**" excludes="backend/**"/>
    </copy>
  </target>

  <target name="deploy.appserver.conf" if="setup.appserver.conf">
    <echo message="[${layer.name}] Executing target:deploy.appserver.conf"/>    
    <copy todir="${appserver.home}" overwrite="yes">
      <fileset dir="${config.dir}/appserver/${appserver.name}-${appserver.version}" 
	           includes="**"/>
    </copy>
  </target>

  <target name="deploy.webserver.conf" if="setup.webserver.conf">
    <echo message="[${layer.name}] Executing target:deploy.webserver.conf"/>    
    <copy todir="${webserver.home}" overwrite="yes">
      <fileset dir="${config.dir}/webserver/${webserver.name}-${webserver.version}" 
	           includes="**"/>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Setting up the database environment                                 -->
  <!-- =================================================================== -->
  <target name="setup.db" if="setup.db">
    <antcall target="stop.db.service"/>
	<antcall target="stop.db"/>
	<antcall target="start.db"/>
	<sequential>
		<sleep seconds="5"/>
		<antcall target="cleanup.db"/>
		<antcall target="exec.sqlscripts"/>
        <antcall target="stop.db"/>
		<sleep seconds="5"/>
	</sequential>
  </target>

  <!-- =================================================================== -->
  <!-- Cleanup the database                                                  -->
  <!-- =================================================================== -->
  <target name="cleanup.db">
    <echo message="[${layer.name}] Executing target:cleanup.db"/>
	<!--script to purge/delete the DB eg MYSQL/ Postgres -->
	<echo message="Debug dbInvokeCmd: ${db.manual.invoke.cmd}  dbInvokeParam: ${db.manual.invoke.param} ${db.home}" />
	<exec dir="." executable="./db/${database.vendor}/cleanDB.bat">	
		<arg file="./db/${db.manual.invoke.cmd}"/>
		<arg file="${db.home}"/>
		<arg value="${gridtalk.home}" />
		<arg value="${db.manual.invoke.param1}"/>
		<arg value="${db.manual.invoke.param2}"/>
		<arg value="${db.manual.invoke.param3}"/>
		<arg value="${db.manual.invoke.param4}"/>
		<arg value="${db.manual.invoke.param5}"/>
	</exec>
  </target>
  
  <!-- =================================================================== -->
  <!-- Start the database                                                  -->
  <!-- =================================================================== -->
  <target name="start.db">
    <echo message="[${layer.name}] Executing target:start.db"/>
    <!--exec dir="${db.home}" executable="${db.start.cmd}"-->
	<exec dir="${db.home}" executable="${db.start.cmd}" spawn="true">
		<!--arg file="./db/${db.manual.invoke.cmd}"/-->
		<arg value="${gridtalk.home}" />
	    <!--arg value="${db.manual.invoke.param1}"/>
		<arg value="${db.manual.invoke.param2}"/>
		<arg value="${db.manual.invoke.param3}"/>
		<arg value="${db.manual.invoke.param4}"/>
		<arg value="${db.manual.invoke.param5}"/-->
	</exec>
  </target>

  <!-- =================================================================== -->
  <!-- Stop the database                                                   -->
  <!-- =================================================================== -->
  <target name="stop.db">
    <echo message="[${layer.name}] Executing target:stop.db"/>
    <exec dir="${db.home}" executable="${db.stop.cmd}">
		<!--arg file="./db/${db.manual.invoke.cmd}"/-->
		<arg value="${gridtalk.home}" />
	    <!--arg value="${db.manual.invoke.param1}"/>
		<arg value="${db.manual.invoke.param2}"/>
		<arg value="${db.manual.invoke.param3}"/>
		<arg value="${db.manual.invoke.param4}"/>
		<arg value="${db.manual.invoke.param5}"/-->
	</exec>
  </target>

  <!-- =================================================================== -->
  <!-- Stop the database  services                                                -->
  <!-- =================================================================== -->
  <target name="stop.db.service">
    <echo message="[${layer.name}] Executing target:stop.db.service"/>
    <exec dir="${db.home}" executable="${db.stop.cmd}"/>
	  <!--arg value="${gridtalk.home}" />
	</exec-->
  </target>  
  
 <!-- =================================================================== -->
  <!-- Execute the database scripts                                        -->
  <!-- =================================================================== -->
  <target name="exec.sqlscripts"
         depends="exec.dbscripts.create,
		          exec.dbscripts.setup,
                  exec.dbscripts.update,
                  exec.dbscripts.populate"/>

  <target name="exec.dbscripts.create">
    <echo message="[${layer.name}] Executing target:exec.dbscripts.create"/>
    <antcall target="exec.dbscripts">
      <param name="dbscript.dir" value="${run.dir}/sqlscripts"/>
      <param name="includes" value="create-db.sql"/>
	  <param name="default.db" value="true"/> <!-- to create a new database in the DB system-->
    </antcall>
    <antcall target="exec.dbscripts">
      <param name="dbscript.dir" value="${run.dir}/sqlscripts"/>
      <param name="includes" value="*.sql"/>
      <param name="excludes" value="create-db.sql"/>
    </antcall>
  </target>

  <target name="exec.dbscripts.setup">
    <echo message="[${layer.name}] Executing target:exec.dbscripts.setup"/>
    <antcall target="exec.dbscripts">
      <param name="dbscript.dir" value="${run.dir}/sqlscripts"/>
      <param name="includes" value="**/setup/**/*.sql"/>
    </antcall>
  </target>

  <!-- added by AMH on 07/10/02 -->
  <target name="exec.dbscripts.update">
    <echo message="[${layer.name}-${module.name}] Executing target:exec.dbscripts.update"/>
    <antcall target="exec.dbscripts">
      <param name="dbscript.dir" value="${run.dir}/sqlscripts"/>
      <param name="includes" value="**/update/**/*.sql"/>
    </antcall>
  </target>
  <!-- end -->

  <target name="exec.dbscripts.populate">
    <echo message="[${layer.name}] Executing target:exec.dbscripts.populate"/>
    <antcall target="exec.dbscripts">
      <param name="dbscript.dir" value="${run.dir}/sqlscripts"/>
      <param name="includes" value="**/populate/**/*.sql"/>
    </antcall>
  </target>

  <target name="exec.dbscripts">
    <echo message="exec.dbscripts dir ${dbscript.dir} db vendor ${database.vendor} ::  db.exec.cmd ${db.exec.cmd}    " />
    <apply executable="${project.dir}/dbscript.bat">
	  <arg value="${database.vendor}" />
      <arg value="${db.exec.cmd}"/>
      <arg value="${db.root.password}"/>
	  <arg value="${default.db}" />	
      <fileset dir="${dbscript.dir}"
               includes="${includes}"
               excludes="${excludes}"/>
    </apply>
  </target>

  <!-- =================================================================== -->
  <!-- Create the deployment descriptors for web			                                         -->
  <!-- =================================================================== -->
  <target name="create.war.dd">
    <property file="./[${layer.name}]-dd.properties"/>
    <condition property="has.server">
      <or>
        <equals arg1="${servlet.type.1}" arg2="server"/>
        <equals arg1="${servlet.type.2}" arg2="server"/>
        <equals arg1="${servlet.type.3}" arg2="server"/>
        <equals arg1="${servlet.type.4}" arg2="server"/>
        <equals arg1="${servlet.type.5}" arg2="server"/>
      </or>
    </condition>
    <condition property="has.client">
      <or>
        <equals arg1="${servlet.type.1}" arg2="client"/>
        <equals arg1="${servlet.type.2}" arg2="client"/>
        <equals arg1="${servlet.type.3}" arg2="client"/>
        <equals arg1="${servlet.type.4}" arg2="client"/>
        <equals arg1="${servlet.type.5}" arg2="client"/>
      </or>
    </condition>
    <antcall target="decide.client"/>
    <antcall target="decide.server"/>
  </target>

  <target name="decide.client" if="has.client">
    <antcall target="create.web.xml.header">
      <param name="servlet.type" value="client"/>
      <param name="war.description" value="${client.war.description}"/>
      <param name="display.name" value="${client.war.display.name}"/>
    </antcall>
    <antcall target="create.jboss-web.xml.header">
      <param name="servlet.type" value="client"/>
    </antcall>
    <antcall target="create.dd.own.body">
      <param name="for.servlet.type" value="client"/>
    </antcall>
    <antcall target="create.web.xml.footer">
      <param name="servlet.type" value="client"/>
    </antcall>
    <antcall target="create.jboss-web.xml.footer">
      <param name="servlet.type" value="client"/>
    </antcall>
  </target>

  <target name="decide.server" if="has.server">
    <antcall target="create.web.xml.header">
      <param name="servlet.type" value="server"/>
      <param name="war.description" value="${server.war.description}"/>
      <param name="display.name" value="${server.war.display.name}"/>
    </antcall>
    <antcall target="create.jboss-web.xml.header">
      <param name="servlet.type" value="server"/>
    </antcall>
    <antcall target="create.dd.own.body">
      <param name="for.servlet.type" value="server"/>
    </antcall>
    <antcall target="create.web.xml.footer">
      <param name="servlet.type" value="server"/>
    </antcall>
    <antcall target="create.jboss-web.xml.footer">
      <param name="servlet.type" value="server"/>
    </antcall>
  </target>

  <target name="create.dd.own.body">
    <antcall target="create.dd.per.module.servlet.1"/>
    <antcall target="create.dd.per.module.servlet.2"/>
    <antcall target="create.dd.per.module.servlet.3"/>
    <antcall target="create.dd.per.module.servlet.4"/>
    <antcall target="create.dd.per.module.servlet.5"/>
    <antcall target="create.dd.per.module.ejb-ref.1"/>
    <antcall target="create.dd.per.module.ejb-ref.2"/>
    <antcall target="create.dd.per.module.ejb-ref.3"/>
    <antcall target="create.dd.per.module.ejb-ref.4"/>
    <antcall target="create.dd.per.module.ejb-ref.5"/>
    <antcall target="create.dd.per.module.taglib.1"/>
    <antcall target="create.dd.per.module.taglib.2"/>
    <antcall target="create.dd.per.module.taglib.3"/>
    <antcall target="create.dd.per.module.taglib.4"/>
    <antcall target="create.dd.per.module.taglib.5"/>
  </target>

  <target name="create.dd.per.module.servlet.1" if="servlet.name.1">
    <condition property="can.create.body">
      <equals arg1="${for.servlet.type}" arg2="${servlet.type.1}"/>
    </condition>
    <antcall target="create.dd.body.per.servlet">
      <param name="servlet.name" value="${servlet.name.1}"/>
      <param name="servlet.display.name" value="${servlet.display.name.1}"/>
      <param name="servlet.description" value="${servlet.description.1}"/>
      <param name="servlet.class" value="${servlet.class.1}"/>
      <param name="servlet.load.on.startup" value="${servlet.load.on.startup.1}"/>
      <param name="servlet.type" value="${servlet.type.1}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.servlet.2" if="servlet.name.2">
    <condition property="can.create.body">
      <equals arg1="${for.servlet.type}" arg2="${servlet.type.2}"/>
    </condition>
    <antcall target="create.dd.body.per.servlet">
      <param name="servlet.name" value="${servlet.name.2}"/>
      <param name="servlet.display.name" value="${servlet.display.name.2}"/>
      <param name="servlet.description" value="${servlet.description.2}"/>
      <param name="servlet.class" value="${servlet.class.2}"/>
      <param name="servlet.load.on.startup" value="${servlet.load.on.startup.2}"/>
      <param name="servlet.type" value="${servlet.type.2}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.servlet.3" if="servlet.name.3">
    <condition property="can.create.body">
      <equals arg1="${for.servlet.type}" arg2="${servlet.type.1}"/>
    </condition>
    <antcall target="create.dd.body.per.servlet">
      <param name="servlet.name" value="${servlet.name.3}"/>
      <param name="servlet.display.name" value="${servlet.display.name.3}"/>
      <param name="servlet.description" value="${servlet.description.3}"/>
      <param name="servlet.class" value="${servlet.class.3}"/>
      <param name="servlet.load.on.startup" value="${servlet.load.on.startup.3}"/>
      <param name="servlet.type" value="${servlet.type.3}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.servlet.4" if="servlet.name.4">
    <condition property="can.create.body">
      <equals arg1="${for.servlet.type}" arg2="${servlet.type.1}"/>
    </condition>
    <antcall target="create.dd.body.per.servlet">
      <param name="servlet.name" value="${servlet.name.4}"/>
      <param name="servlet.display.name" value="${servlet.display.name.4}"/>
      <param name="servlet.description" value="${servlet.description.4}"/>
      <param name="servlet.class" value="${servlet.class.4}"/>
      <param name="servlet.load.on.startup" value="${servlet.load.on.startup.4}"/>
      <param name="servlet.type" value="${servlet.type.4}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.servlet.5" if="servlet.name.5">
    <condition property="can.create.body">
      <equals arg1="${for.servlet.type}" arg2="${servlet.type.1}"/>
    </condition>
    <antcall target="create.dd.body.per.servlet">
      <param name="servlet.name" value="${servlet.name.5}"/>
      <param name="servlet.display.name" value="${servlet.display.name.5}"/>
      <param name="servlet.description" value="${servlet.description.5}"/>
      <param name="servlet.class" value="${servlet.class.5}"/>
      <param name="servlet.load.on.startup" value="${servlet.load.on.startup.5}"/>
      <param name="servlet.type" value="${servlet.type.5}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.ejb-ref.1" if="ejb.ref.name.1">
    <antcall target="create.dd.body.per.ejb.ref">
      <param name="ejb.ref.name" value="${ejb.ref.name.1}"/>
      <param name="ejb.ref.type" value="${ejb.ref.type.1}"/>
      <param name="ejb.ref.home" value="${ejb.ref.home.1}"/>
      <param name="ejb.ref.remote" value="${ejb.ref.remote.1}"/>
      <param name="ejb.ref.jndi.name" value="${ejb.ref.jndi.name.1}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.ejb-ref.2" if="ejb.ref.name.2">
    <antcall target="create.dd.body.per.ejb.ref">
      <param name="ejb.ref.name" value="${ejb.ref.name.2}"/>
      <param name="ejb.ref.type" value="${ejb.ref.type.2}"/>
      <param name="ejb.ref.home" value="${ejb.ref.home.2}"/>
      <param name="ejb.ref.remote" value="${ejb.ref.remote.2}"/>
      <param name="ejb.ref.jndi.name" value="${ejb.ref.jndi.name.2}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.ejb-ref.3" if="ejb.ref.name.3">
    <antcall target="create.dd.body.per.ejb.ref">
      <param name="ejb.ref.name" value="${ejb.ref.name.3}"/>
      <param name="ejb.ref.type" value="${ejb.ref.type.3}"/>
      <param name="ejb.ref.home" value="${ejb.ref.home.3}"/>
      <param name="ejb.ref.remote" value="${ejb.ref.remote.3}"/>
      <param name="ejb.ref.jndi.name" value="${ejb.ref.jndi.name.3}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.ejb-ref.4" if="ejb.ref.name.4">
    <antcall target="create.dd.body.per.ejb.ref">
      <param name="ejb.ref.name" value="${ejb.ref.name.4}"/>
      <param name="ejb.ref.type" value="${ejb.ref.type.4}"/>
      <param name="ejb.ref.home" value="${ejb.ref.home.4}"/>
      <param name="ejb.ref.remote" value="${ejb.ref.remote.4}"/>
      <param name="ejb.ref.jndi.name" value="${ejb.ref.jndi.name.4}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.ejb-ref.5" if="ejb.ref.name.5">
    <antcall target="create.dd.body.per.ejb.ref">
      <param name="ejb.ref.name" value="${ejb.ref.name.5}"/>
      <param name="ejb.ref.type" value="${ejb.ref.type.5}"/>
      <param name="ejb.ref.home" value="${ejb.ref.home.5}"/>
      <param name="ejb.ref.remote" value="${ejb.ref.remote.5}"/>
      <param name="ejb.ref.jndi.name" value="${ejb.ref.jndi.name.5}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.taglib.1" if="taglib.uri.1">
    <antcall target="create.dd.body.per.taglib">
      <param name="taglib.uri" value="${taglib.uri.1}"/>
      <param name="taglib.location" value="${taglib.location.1}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.taglib.2" if="taglib.uri.2">
    <antcall target="create.dd.body.per.taglib">
      <param name="taglib.uri" value="${taglib.uri.2}"/>
      <param name="taglib.location" value="${taglib.location.2}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.taglib.3" if="taglib.uri.3">
    <antcall target="create.dd.body.per.taglib">
      <param name="taglib.uri" value="${taglib.uri.3}"/>
      <param name="taglib.location" value="${taglib.location.3}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.taglib.4" if="taglib.uri.4">
    <antcall target="create.dd.body.per.taglib">
      <param name="taglib.uri" value="${taglib.uri.4}"/>
      <param name="taglib.location" value="${taglib.location.4}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <target name="create.dd.per.module.taglib.5" if="taglib.uri.5">
    <antcall target="create.dd.body.per.taglib">
      <param name="taglib.uri" value="${taglib.uri.5}"/>
      <param name="taglib.location" value="${taglib.location.5}"/>
      <param name="servlet.type" value="${for.servlet.type}"/>
    </antcall>
  </target>

  <!-- =================================================================== -->
  <!-- Create the deployment descriptors for app				                                         -->
  <!-- =================================================================== -->
  <!--target name="create.ear.dd">
    <antcall target="create.application.xml.header"/>
    <antcall target="create.dd.module.own"/>
    <antcall target="create.dd.module.1"/>
    <antcall target="create.dd.module.2"/>
    <antcall target="create.dd.module.3"/>
    <antcall target="create.dd.module.4"/>
    <antcall target="create.dd.module.5"/>
    <antcall target="create.application.xml.footer"/>
  </target>

  <target name="create.dd.module.1" if="deplib.module.1">
    <antcall target="create.dd.body.per.module">
      <param name="deplib.module.layer" value="${deplib.module.layer.1}"/>
      <param name="deplib.module" value="${deplib.module.1}"/>
    </antcall>
  </target>

  <target name="create.dd.module.2" if="deplib.module.2">
    <antcall target="create.dd.body.per.module">
      <param name="deplib.module.layer" value="${deplib.module.layer.2}"/>
      <param name="deplib.module" value="${deplib.module.2}"/>
    </antcall>
  </target>

  <target name="create.dd.module.3" if="deplib.module.3">
    <antcall target="create.dd.body.per.module">
      <param name="deplib.module.layer" value="${deplib.module.layer.3}"/>
      <param name="deplib.module" value="${deplib.module.3}"/>
    </antcall>
  </target>

  <target name="create.dd.module.4" if="deplib.module.4">
    <antcall target="create.dd.body.per.module">
      <param name="deplib.module.layer" value="${deplib.module.layer.4}"/>
      <param name="deplib.module" value="${deplib.module.4}"/>
    </antcall>
  </target>

  <target name="create.dd.module.5" if="deplib.module.5">
    <antcall target="create.dd.body.per.module">
      <param name="deplib.module.layer" value="${deplib.module.layer.5}"/>
      <param name="deplib.module" value="${deplib.module.5}"/>
    </antcall>
  </target-->

  <!-- =================================================================== -->
  <!-- Define the application.xml file name                                -->
  <!-- =================================================================== -->
  <target name="define.app.xml" unless="application.xml.file">
    <property name="application.xml.file" value="${top.build.dir}/deploy/META-INF/GTAS/application.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the Headers for deployment descriptors for Ear               -->
  <!-- =================================================================== -->

  <target name="ear.dd.header" depends="define.app.xml">
    <echo message="[${layer.name}-${module.name}] Executing target:ear.dd.header"/>
    <delete file="${application.xml.file}"/>
    <antcall target="create.application.xml.header"/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the Footers for deployment descriptors for Ear               -->
  <!-- =================================================================== -->
  <target name="ear.dd.footer" if="application.xml.file">
    <echo message="[${layer.name}-${module.name}] Executing target:ear.dd.footer"/>
    <antcall target="create.application.xml.footer"/>
  </target>

  <target name="create.dd.module.own">
    <property file="./[${layer.name}]-dd.properties"/>
    <antcall target="decide.application.xml.body.ejb.1"/>
    <antcall target="decide.application.xml.body.ejb.2"/>
    <antcall target="decide.application.xml.body.ejb.3"/>
    <antcall target="decide.application.xml.body.ejb.4"/>
    <antcall target="decide.application.xml.body.ejb.5"/>
    <antcall target="create.application.xml.body.web.1"/>
    <antcall target="create.application.xml.body.web.2"/>
    <antcall target="create.application.xml.body.web.3"/>
    <antcall target="create.application.xml.body.web.4"/>
    <antcall target="create.application.xml.body.web.5"/>
  </target>

  <!--target name="decide.application.xml.body.ejb.1" if="ejb.jar.1.comp.name">
    <antcall target="create.application.xml.body.ejb.1">
      <param name="ejb.jar.1" value="[${layer.name}]-${ejb.jar.1.comp.name}-ejb.jar"/>
    </antcall>
  </target>

  <target name="decide.application.xml.body.ejb.2" if="ejb.jar.2.comp.name">
    <antcall target="create.application.xml.body.ejb.2">
      <param name="ejb.jar.2" value="[${layer.name}]-${ejb.jar.2.comp.name}-ejb.jar"/>
    </antcall>
  </target>

  <target name="decide.application.xml.body.ejb.3" if="ejb.jar.3.comp.name">
    <antcall target="create.application.xml.body.ejb.3">
      <param name="ejb.jar.3" value="[${layer.name}]-${ejb.jar.3.comp.name}-ejb.jar"/>
    </antcall>
  </target>

  <target name="decide.application.xml.body.ejb.4" if="ejb.jar.4.comp.name">
    <antcall target="create.application.xml.body.ejb.4">
      <param name="ejb.jar.4" value="[${layer.name}]-${ejb.jar.4.comp.name}-ejb.jar"/>
    </antcall>
  </target>

  <target name="decide.application.xml.body.ejb.5" if="ejb.jar.5.comp.name">
    <antcall target="create.application.xml.body.ejb.5">
      <param name="ejb.jar.5" value="[${layer.name}]-${ejb.jar.5.comp.name}-ejb.jar"/>
    </antcall>
  </target>

  <target name="create.dd.body.per.module">
    <property file="${deplib.dir}/${deplib.module.layer}-${deplib.module}-dd.properties"/>
    <antcall target="create.application.xml.body.ejb.1"/>
    <antcall target="create.application.xml.body.ejb.2"/>
    <antcall target="create.application.xml.body.ejb.3"/>
    <antcall target="create.application.xml.body.ejb.4"/>
    <antcall target="create.application.xml.body.ejb.5"/>
    <antcall target="create.application.xml.body.web.1"/>
    <antcall target="create.application.xml.body.web.2"/>
    <antcall target="create.application.xml.body.web.3"/>
    <antcall target="create.application.xml.body.web.4"/>
    <antcall target="create.application.xml.body.web.5"/>
  </target-->

  <target name="create.application.xml.body.ejb.1" if="ejb.jar.1">
    <antcall target="create.application.xml.body.ejb">
      <param name="ejb.jar" value="${ejb.jar.1}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.ejb.2" if="ejb.jar.2">
    <antcall target="create.application.xml.body.ejb">
      <param name="ejb.jar" value="${ejb.jar.2}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.ejb.3" if="ejb.jar.3">
    <antcall target="create.application.xml.body.ejb">
      <param name="ejb.jar" value="${ejb.jar.3}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.ejb.4" if="ejb.jar.4">
    <antcall target="create.application.xml.body.ejb">
      <param name="ejb.jar" value="${ejb.jar.4}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.ejb.5" if="ejb.jar.5">
    <antcall target="create.application.xml.body.ejb">
      <param name="ejb.jar" value="${ejb.jar.5}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.web.1" if="web.uri.1">
    <antcall target="create.application.xml.body.web">
      <param name="web.uri" value="${web.uri.1}"/>
      <param name="web.context.root" value="${web.context.root.1}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.web.2" if="web.uri.2">
    <antcall target="create.application.xml.body.web">
      <param name="web.uri" value="${web.uri.2}"/>
      <param name="web.context.root" value="${web.context.root.2}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.web.3" if="web.uri.3">
    <antcall target="create.application.xml.body.web">
      <param name="web.uri" value="${web.uri.3}"/>
      <param name="web.context.root" value="${web.context.root.3}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.web.4" if="web.uri.4">
    <antcall target="create.application.xml.body.web">
      <param name="web.uri" value="${web.uri.4}"/>
      <param name="web.context.root" value="${web.context.root.4}"/>
    </antcall>
  </target>

  <target name="create.application.xml.body.web.5" if="web.uri.5">
    <antcall target="create.application.xml.body.web">
      <param name="web.uri" value="${web.uri.5}"/>
      <param name="web.context.root" value="${web.context.root.5}"/>
    </antcall>
  </target>

  <!-- =================================================================== -->
  <!-- Template of the jboss-web.xml file                                               -->
  <!-- =================================================================== -->
  <target name="create.jboss-web.xml.header">
    <!-- Header -->
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/jboss-web.xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;jboss-web&gt;
    </echo>
  </target>

  <target name="create.jboss-web.xml.body">
    <!-- Body -->
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/jboss-web.xml" append="true">
  &lt;ejb-ref&gt;
    &lt;ejb-ref-name&gt;${ejb.ref.name}&lt;/ejb-ref-name&gt;
    &lt;jndi-name>${ejb.ref.jndi.name}&lt;/jndi-name&gt;
  &lt;/ejb-ref&gt;
    </echo>
  </target>

  <target name="create.jboss-web.xml.footer">
    <!-- Footer -->
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/jboss-web.xml" append="true">
&lt;/jboss-web&gt;
    </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Template of the web.xml file                                               -->
  <!-- =================================================================== -->
  <target name="create.web.xml.header">
    <!-- Header -->
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/web.xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN&quot;
&quot;http://java.sun.com/j2ee/dtds/web-app_2_2.dtd&quot;&gt;
&lt;web-app&gt;
  &lt;display-name&gt;${display.name}&lt;/display-name&gt;
  &lt;description&gt;${war.description}&lt;/description&gt;
  &lt;distributable/&gt;
  &lt;welcome-file-list&gt;&lt;/welcome-file-list&gt;
    </echo>
  </target>

  <target name="create.web.xml.body">
    <!-- Body -->
  </target>

  <target name="create.dd.body.per.servlet"  if="can.create.body">
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/web.xml" append="true">
  &lt;servlet&gt;
    &lt;servlet-name&gt;${servlet.name}&lt;/servlet-name&gt;
    &lt;display-name&gt;${servlet.display.name}&lt;/display-name&gt;
    &lt;description&gt;${servlet.description}&lt;/description&gt;
    &lt;servlet-class&gt;${servlet.class}&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;${servlet.load.on.startup}&lt;/load-on-startup&gt;
  &lt;/servlet&gt;
    </echo>
  </target>

  <target name="create.dd.body.per.ejb.ref">
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/web.xml" append="true">
  &lt;ejb-ref&gt;
    &lt;ejb-ref-name&gt;${ejb.ref.name}&lt;/ejb-ref-name&gt;
    &lt;ejb-ref-type&gt;${ejb.ref.type}&lt;/ejb-ref-type&gt;
    &lt;home&gt;${ejb.ref.home}&lt;/home&gt;
    &lt;remote&gt;${ejb.ref.remote}&lt;/remote&gt;
  &lt;/ejb-ref&gt;
    </echo>
    <antcall target="create.jboss-web.xml.body"/>
  </target>

  <target name="create.dd.body.per.taglib">
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/web.xml" append="true">
  &lt;taglib&gt;
    &lt;taglib-uri&gt;${taglib.uri}&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;${taglib.location}&lt;/taglib-location&gt;
  &lt;/taglib&gt;
    </echo>
  </target>

  <target name="create.web.xml.footer">
    <!-- Footer -->
    <echo file="${webroot.dir}/${servlet.type}/WEB-INF/web.xml" append="true">
&lt;/web-app&gt;
    </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Template of the application.xml file                                               -->
  <!-- =================================================================== -->
  <target name="create.application.xml.header">
    <!-- Header -->
    <echo file="${application.xml.file}">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;application&gt;
  &lt;display-name&gt;${ear.display.name}&lt;/display-name&gt;
    </echo>
  </target>

  <target name="create.application.xml.body.ejb">
    <!-- Body -->
    <echo file="${application.xml.file}" append="true">
  &lt;module&gt;
    &lt;ejb&gt;${ejb.jar}&lt;/ejb&gt;
  &lt;/module&gt;
    </echo>
  </target>

  <target name="create.application.xml.body.web">
    <!-- Body -->
    <echo file="${application.xml.file}" append="true">
  &lt;module&gt;
    &lt;web&gt;
      &lt;web-uri&gt;${web.uri}&lt;/web-uri&gt;
      &lt;context-root&gt;${web.context.root}&lt;/context-root&gt;
    &lt;/web&gt;
  &lt;/module&gt;
    </echo>
  </target>

  <target name="create.application.xml.footer">
    <!-- Footer -->
    <echo file="${application.xml.file}" append="true">
&lt;/application&gt;
    </echo>
  </target>
</project>
